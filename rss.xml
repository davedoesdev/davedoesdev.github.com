<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>Dave Does Dev</title>
    <link>http://www.davedoesdev.com</link>
    <pubDate>2013-03-05 13:33:46 +0000</pubDate>
    <item>
      <title>Wrapping Webkit (Part 2 - Qt/C++)</title>
      <link>http://www.davedoesdev.com/wrapping-webkit-part-2-qt-c%2B%2B</link>
      <pubDate>2013-01-27</pubDate>
      <description>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Wrapping Webkit (Part 2 - Qt/C++) - Dave Does Dev&lt;/title&gt;
    &lt;meta name="author" content="David Halls"&gt;

    &lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap.min.css?0.21509962722825227" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap-responsive.min.css?0.8754159957513783" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css-social-buttons/zocial.stripped.css?0.3012290496340774" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/darkstrap.css?0.3669666787211687" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/style.css?0.40859210901233556" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/widgets/google_prettify/stylesheets/sunburst.css?0.311294204770039" type="text/css" rel="stylesheet" media="all"&gt;

&lt;script src="/assets/my_hooligan/javascripts/jquery.min.js?0.8195434250467105"&gt;&lt;/script&gt;
&lt;script src="/assets/my_hooligan/javascripts/bootstrap.min.js?0.890927054696974"&gt;&lt;/script&gt;
 
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="shortcut icon" href="/assets/media/favicon.ico"&gt;
    &lt;!-- fav and touch icons --&gt;
  &lt;!-- Update these with your own images
    &lt;link rel="shortcut icon" href="images/favicon.ico"&gt;
    &lt;link rel="apple-touch-icon" href="images/apple-touch-icon.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png"&gt;
  --&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class="navbar"&gt;
      &lt;div class="navbar-inner"&gt;
        &lt;div class="container"&gt;
          &lt;!-- .btn-navbar is used as the toggle for collapsed navbar content --&gt;
          &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/a&gt;      


          &lt;a class="brand" href="/"&gt;Dave Does Dev&lt;/a&gt;


          &lt;div class="nav-collapse"&gt;
            &lt;ul class="nav"&gt;
                
                  &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/about"&gt;About Me&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Github&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Twitter&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="hidden-desktop" target="_self"&gt;LinkedIn&lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="hidden-desktop" target="_self"&gt;RSS&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul class="nav pull-right social visible-desktop"&gt;
              &lt;li class="divider-vertical"&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="zocial github icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Github&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="zocial twitter icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Twitter&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="zocial linkedin icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;LinkedIn&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="zocial rss icon" target="_self"&gt;
                  &lt;span class="hidden-desktop"&gt;RSS&lt;/span&gt;
                &lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
      &lt;div class="content"&gt;
        &lt;div class="page-header"&gt;
  &lt;h1&gt;
    Wrapping Webkit (Part 2 - Qt/C++) 
  &lt;/h1&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;div class="span9"&gt;
    &lt;p&gt;In my &lt;a href="/wrapping-webkit-part-1-gtk%2B-vala"&gt;previous post&lt;/a&gt;, I showed how to
get bi-directional communication going between Javascript and Vala, using
GTK+&amp;#39;s Webkit component.&lt;/p&gt;

&lt;p&gt;This time I&amp;#39;m going to do the same between Javascript and C++, using
&lt;a href="http://qt-project.org/"&gt;Qt&lt;/a&gt;&amp;#39;s Webkit component. Last time out I decided against
using C++ with GTK+ but Qt seems better suited to the language. Let&amp;#39;s see
how Qt/C++ compares to GTK+/Vala.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll be sticking to the same example &lt;a href="/wrapping-webkit-part-1-gtk%2B-vala#example"&gt;we used before with Vala&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A main function for parsing command line options and initializing things.&lt;/li&gt;
&lt;li&gt;A window class which embeds Webkit and puts it in a Qt window.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id="toc_0"&gt;Main function&lt;/h1&gt;

&lt;p&gt;The first thing to do in a Qt application is declare a &lt;strong&gt;QApplication&lt;/strong&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This initializes Qt so it&amp;#39;s a good idea to do it early on.&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll support the same command line options: &lt;strong&gt;url&lt;/strong&gt;, &lt;strong&gt;fullscreen&lt;/strong&gt;,
&lt;strong&gt;hidecursor&lt;/strong&gt; and &lt;strong&gt;debug&lt;/strong&gt;.  Qt doesn&amp;#39;t have a helper class to parse command
line options so we&amp;#39;ll use
&lt;a href="http://tclap.sourceforge.net/"&gt;TCLAP&lt;/a&gt;, a nice small library for doing just
that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;TCLAP::CmdLine cmd(&amp;quot;Webkit Example&amp;quot;);
TCLAP::ValueArg&amp;lt;std::string&amp;gt; urlArg(&amp;quot;u&amp;quot;, &amp;quot;url&amp;quot;, &amp;quot;page to load&amp;quot;, false, &amp;quot;file://&amp;quot; + QDir(a.applicationDirPath()).filePath(&amp;quot;test.html&amp;quot;).toStdString(), &amp;quot;URL&amp;quot;, cmd);
TCLAP::SwitchArg fullscreenSwitch(&amp;quot;f&amp;quot;, &amp;quot;fullscreen&amp;quot;, &amp;quot;run in fullscreen mode&amp;quot;, cmd, false);
TCLAP::SwitchArg hidecursorSwitch(&amp;quot;c&amp;quot;, &amp;quot;hidecursor&amp;quot;, &amp;quot;hide mouse cursor&amp;quot;, cmd, false);
TCLAP::SwitchArg debugSwitch(&amp;quot;d&amp;quot;, &amp;quot;debug&amp;quot;, &amp;quot;enable web inspector&amp;quot;, cmd, false);

cmd.parse(argc, argv);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we specify the default value for each option at the same time.
&lt;strong&gt;url&lt;/strong&gt; defaults to a file called &lt;strong&gt;test.html&lt;/strong&gt; in the same directory as the
application.&lt;/p&gt;

&lt;p&gt;Now we create our Qt window which embeds Webkit (see the next section for
details of our window class):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MainWindow w(debugSwitch.getValue());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make it full screen if the command line option was passed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (fullscreenSwitch.getValue())
{
    w.setWindowState(Qt::WindowFullScreen);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A slight difference with the Vala version is that we hide the mouse cursor
using the application object rather than the window:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (hidecursorSwitch.getValue())
{
    a.setOverrideCursor(QCursor(Qt::BlankCursor));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we can load the URL into Webkit (this is a method on our window class
which ends up calling into Webkit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w.load(urlArg.getValue().c_str());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and show the window and all its children (including Webkit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w.show():
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we have to start the Qt application (i.e. the main event loop):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return a.exec();
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_1"&gt;Window class&lt;/h1&gt;

&lt;h2 id="toc_2"&gt;Declaration&lt;/h2&gt;

&lt;p&gt;This class is going to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inherit from the Qt &lt;strong&gt;QMainWindow&lt;/strong&gt; class so it&amp;#39;s a top-level window.&lt;/li&gt;
&lt;li&gt;Apply settings and add widgets defined visually in Qt Creator, Qt&amp;#39;s IDE.
In our GTK+/Vala example, we did this ourselves in code. With Qt Creator,
you can configure things like the window&amp;#39;s size and add a Webkit component
to it visually using a form designer.&lt;/li&gt;
&lt;li&gt;Specify what Webkit features are enabled.&lt;/li&gt;
&lt;li&gt;Start a thread which reads data from standard input.&lt;/li&gt;
&lt;li&gt;Expose an object to Javascript which has two methods:

&lt;ol&gt;
&lt;li&gt;A method which returns data read by the thread from standard input.
This shows we can get data from C++ into the Web app.&lt;/li&gt;
&lt;li&gt;A method which writes its argument to standard output and then terminates
the application. This shows we can call C++ functions and pass them data
from the Web app.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s how we declare our window class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class MainWindow : public QMainWindow
{
    Q_OBJECT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see we inherit from &lt;strong&gt;QMainWindow&lt;/strong&gt;. We also have to use the
&lt;strong&gt;Q_OBJECT&lt;/strong&gt; macro in our class because we&amp;#39;ll be using Qt &lt;em&gt;signals&lt;/em&gt; and &lt;em&gt;slots&lt;/em&gt;.
Signals and slots are declared like any other C++ method but Qt can connect a
signal to a slot at runtime. When the signal method is called, Qt makes sure
that any slot methods connected to it are also called. We&amp;#39;ll be using signals
slots in this example.&lt;/p&gt;

&lt;p&gt;Next we declare our constructor and destructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public:
    explicit MainWindow(bool debug, QWidget *parent = 0);
    ~MainWindow() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and a public method to load a URL into Webkit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void load(const char *url);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;MainWindow&lt;/strong&gt; class has the following private data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private:
    Ui::MainWindow ui;
    DataReader reader;
    QThread readerThread;
    Bridge bridge;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ui::MainWindow&lt;/strong&gt; is a class which Qt Creator&amp;#39;s form designer generates from
your visual design for the window. Qt Creator saves your design as an XML
file which is then converted into this class. You can find the XML file for this
example &lt;a href="https://gist.github.com/davedoesdev/4659070#file-mainwindow-ui"&gt;here&lt;/a&gt;.
I put a grid layout onto the window and then dragged a &lt;strong&gt;QWebView&lt;/strong&gt; widget
onto the layout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DataReader&lt;/strong&gt; is a class we&amp;#39;ll define later which reads data from standard
input and raises a signal with the data when it&amp;#39;s done. This will be done in a
thread (&lt;strong&gt;readerThread&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt; is also a class we&amp;#39;ll define later. It contains the methods we want
to expose to Javascript: one to retrieve the data read by &lt;strong&gt;reader&lt;/strong&gt; from
standard input and one to exit the application. It should also have a slot
which can receive the data from &lt;strong&gt;reader&lt;/strong&gt; and store it.&lt;/p&gt;

&lt;p&gt;Finally, we can define a couple of slots &amp;mdash; we&amp;#39;ll connect them to signals
later:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private slots:
    void addBridgeToPage();
    void exit(QString msg);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;addBridgeToPage&lt;/strong&gt; will be called whenever a new page is loaded into Webkit.
It will add &lt;strong&gt;bridge&lt;/strong&gt; to the page. &lt;strong&gt;exit&lt;/strong&gt; will print its argument to
standard output and then close the window. Note we declare these slots
&lt;strong&gt;private&lt;/strong&gt;. This just means the methods which implement them are private to
the class &amp;mdash; Qt can connect the slots themselves to signals in any class.&lt;/p&gt;

&lt;h2 id="toc_3"&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;MainWindow&lt;/strong&gt;&amp;#39;s implementation is pretty simple. Let&amp;#39;s look at the constructor
first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MainWindow::MainWindow(bool debug, QWidget *parent) :
    QMainWindow(parent)
{
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::PluginsEnabled, true);
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::JavascriptEnabled, true);
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::LinksIncludedInFocusChain, false);
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::LocalContentCanAccessRemoteUrls, true);
    QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::LocalStorageEnabled, true);

    if (debug)
    {
        QWebSettings::globalSettings()-&amp;gt;setAttribute(QWebSettings::DeveloperExtrasEnabled, true);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see we set a bunch of Webkit options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable plugins (you usually don&amp;#39;t need this).&lt;/li&gt;
&lt;li&gt;Enable Javascript.&lt;/li&gt;
&lt;li&gt;Enable tabbing between links.&lt;/li&gt;
&lt;li&gt;Allow pages loaded from local disk to make calls to remote URLs. The
Javascript in our example doesn&amp;#39;t do this but it&amp;#39;s useful if you want to
distribute a HTML/JS user interface and have it communicate with a server
somewhere.&lt;/li&gt;
&lt;li&gt;Enable Local (DOM) storage. Again, our example doesn&amp;#39;t actually need to do
this.&lt;/li&gt;
&lt;li&gt;Enable Webkit&amp;#39;s Web inspector if the &lt;strong&gt;debug&lt;/strong&gt; parameter is true.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we have to initialize the user interface we designed visually using
Qt Creator&amp;#39;s form designer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ui.setupUi(this);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we need to hook up a bunch of signals and slots. First, add &lt;strong&gt;bridge&lt;/strong&gt;
to the global Javascript environment when a page is loaded. We do this by
connecting the &lt;strong&gt;javaScriptWindowObjectCleared&lt;/strong&gt; signal from Webkit to our
&lt;strong&gt;addBridgeToPage&lt;/strong&gt; method (which we&amp;#39;ll define later):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connect(ui.webView-&amp;gt;page()-&amp;gt;mainFrame(), SIGNAL(javaScriptWindowObjectCleared()), this, SLOT(addBridgeToPage()));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, when Javascript raises the &lt;strong&gt;exit&lt;/strong&gt; signal in &lt;strong&gt;bridge&lt;/strong&gt;, arrange for the
&lt;strong&gt;exit&lt;/strong&gt; method in &lt;strong&gt;MainWindow&lt;/strong&gt; to be called:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connect(&amp;amp;bridge, SIGNAL(exit(QString)), this, SLOT(exit(QString)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When &lt;strong&gt;reader&lt;/strong&gt; has finished reading data from standard input, notify &lt;strong&gt;bridge&lt;/strong&gt;
so it can store the data for Javascript to receive when it polls for it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connect(&amp;amp;reader, SIGNAL(dataRead(QString)), &amp;amp;bridge, SLOT(gotData(QString)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to arrange for &lt;strong&gt;reader&lt;/strong&gt; to be run in a separate thread so it
doesn&amp;#39;t block the main user interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;connect(&amp;amp;readerThread, SIGNAL(started()), &amp;amp;reader, SLOT(read()));
connect(&amp;amp;reader, SIGNAL(dataRead(QString)), &amp;amp;readerThread, SLOT(quit()));

reader.moveToThread(&amp;amp;readerThread);
readerThread.start();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The recommended approach to starting a thread in Qt uses signals and slots,
as you can see above. You connect the &lt;strong&gt;started&lt;/strong&gt; signal to the slot that will
do the work. Then once the work is done (&lt;strong&gt;dataRead&lt;/strong&gt;), tell the thread to stop
(&lt;strong&gt;quit&lt;/strong&gt;). Before starting the thread, you must set the affinity of the object
which will be doing the work (&lt;strong&gt;moveToThread&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Now we can define &lt;strong&gt;MainWindow&lt;/strong&gt;&amp;#39;s methods: &lt;strong&gt;load&lt;/strong&gt;, &lt;strong&gt;addBridgeToPage&lt;/strong&gt; and
&lt;strong&gt;exit&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void MainWindow::load(const char *url)
{
    //ui-&amp;gt;webView-&amp;gt;load(QUrl(url));
    ui.webView-&amp;gt;setHtml(&amp;quot;&amp;lt;script&amp;gt;location.replace(&amp;#39;&amp;quot; + QString(url) + &amp;quot;&amp;#39;);&amp;lt;/script&amp;gt;&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;load&lt;/strong&gt; tells the Webkit component (&lt;strong&gt;webView&lt;/strong&gt;) to visit a URL. If you use
Webkit&amp;#39;s &lt;strong&gt;load&lt;/strong&gt; method to do this, you get an extra entry in the history.
You can see above I use an alternative which runs some Javascript to replace
the current page instead.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void MainWindow::addBridgeToPage()
{
    ui.webView-&amp;gt;page()-&amp;gt;mainFrame()-&amp;gt;addToJavaScriptWindowObject(&amp;quot;bridge&amp;quot;, &amp;amp;bridge);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;addBridgeToPage&lt;/strong&gt; is called whenever a new page is loaded. It adds &lt;strong&gt;bridge&lt;/strong&gt;
to the page so Javascript can call it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void MainWindow::exit(QString msg)
{
    QTextStream(stdout) &amp;lt;&amp;lt; msg &amp;lt;&amp;lt; endl;
    close();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember we connected &lt;strong&gt;MainWindow::exit&lt;/strong&gt; to the &lt;strong&gt;exit&lt;/strong&gt; signal raised by
&lt;strong&gt;bridge&lt;/strong&gt; (this signal is raised when Javascript calls the &lt;strong&gt;exit&lt;/strong&gt; method
on &lt;strong&gt;bridge&lt;/strong&gt; after we exposed it to the page).&lt;/p&gt;

&lt;h1 id="toc_4"&gt;&lt;strong&gt;DataReader&lt;/strong&gt; class&lt;/h1&gt;

&lt;h2 id="toc_5"&gt;Declaration&lt;/h2&gt;

&lt;p&gt;This class just has to read data from standard input and raise a signal with
the data when it&amp;#39;s done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class DataReader : public QObject
{
    Q_OBJECT

private slots:
    void read();

signals:
    void dataRead(QString data);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_6"&gt;Implementation&lt;/h2&gt;

&lt;p&gt;We only need to implement &lt;strong&gt;read&lt;/strong&gt; &amp;mdash; Qt takes care of generating a method
for raising the &lt;strong&gt;dataRead&lt;/strong&gt; signal (the method has the same prototype as the
signal but you have to use the &lt;strong&gt;emit&lt;/strong&gt; keyword when calling it from C++):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void DataReader::read()
{
    emit dataRead(QTextStream(stdin).readAll());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_7"&gt;&lt;strong&gt;Bridge&lt;/strong&gt; class&lt;/h1&gt;

&lt;h2 id="toc_8"&gt;Declaration&lt;/h2&gt;

&lt;p&gt;An object of this class (&lt;strong&gt;bridge&lt;/strong&gt; in &lt;strong&gt;MainWindow&lt;/strong&gt;) will be exposed to
Javascript. It has:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A signal, &lt;strong&gt;exit&lt;/strong&gt;. Javascript apps can just call the &lt;strong&gt;exit&lt;/strong&gt; method on the
&lt;strong&gt;Bridge&lt;/strong&gt; object to raise the signal. Remember we connected this
signal to the &lt;strong&gt;exit&lt;/strong&gt; method in &lt;strong&gt;MainWindow&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A slot, &lt;strong&gt;getData&lt;/strong&gt;, which can be called from Javascript to retrieve data
read from standard input. If no data has yet been read, it should return
an empty string.&lt;/li&gt;
&lt;li&gt;A slot, &lt;strong&gt;gotData&lt;/strong&gt;, which will receive data read from standard input and
store it so it can be returned to Javascript when it calls &lt;strong&gt;getData&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s what this looks like in code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Bridge : public QObject
{
    Q_OBJECT

signals:
    void exit(QString msg);

public slots:
    QString getData();

    // Override slot inherited from QObject which shouldn&amp;#39;t be exposed!
    // See https://bugs.webkit.org/show_bug.cgi?id=34809
    void deleteLater() {}

private slots:
    void gotData(QString data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need a member variable to store the data and a mutex because
Javascript may be calling &lt;strong&gt;getData&lt;/strong&gt; at the same time that &lt;strong&gt;gotData&lt;/strong&gt; is
being called (I&amp;#39;m unclear as to where Javascript calls are handled so it&amp;#39;s
best to be safe):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private:
    QMutex mutex;
    QString data;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_9"&gt;Implementation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;getData&lt;/strong&gt; and &lt;strong&gt;gotData&lt;/strong&gt; are really simple: they just get and set &lt;strong&gt;data&lt;/strong&gt;
inside a lock on &lt;strong&gt;mutex&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;QString Bridge::getData()
{
    QMutexLocker locker(&amp;amp;mutex);
    return data;
}

void Bridge::gotData(QString data)
{
    QMutexLocker locker(&amp;amp;mutex);
    this-&amp;gt;data = data;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id="toc_10"&gt;Test Web page&lt;/h1&gt;

&lt;p&gt;To test our example, we can re-use the &lt;a href="/wrapping-webkit-part-1-gtk%2B-vala#test_page"&gt;Web page we used to test our Vala version&lt;/a&gt;, with a simple modification
to call call &lt;strong&gt;exit&lt;/strong&gt; and &lt;strong&gt;getData&lt;/strong&gt; via &lt;strong&gt;bridge&lt;/strong&gt; rather than as separate
functions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
function check_data()
{
    var data = bridge.getData();

    if (data === &amp;quot;&amp;quot;)
    {
        setTimeout(check_data, 1000);
    }
    else
    {
        document.getElementById(&amp;#39;data&amp;#39;).innerText = data;
    }
}
&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body onload=&amp;#39;check_data()&amp;#39;&amp;gt;
&amp;lt;p&amp;gt;
data: &amp;lt;span id=&amp;quot;data&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;Exit&amp;quot; onclick=&amp;quot;bridge.exit(&amp;#39;goodbye from Javascript&amp;#39;)&amp;quot;&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test it, as before, by piping data to &lt;strong&gt;webkit-example&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;#39;Hello World!&amp;#39; | ./webkit-example
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find all the source from this article &lt;a href="https://gist.github.com/4659070"&gt;here&lt;/a&gt;.&lt;/p&gt;

    &lt;hr&gt;
    &lt;div class="pagination pagination-centered btn-group"&gt;
        &lt;a class="btn prev" href="/wrapping-webkit-part-1-gtk%2B-vala" title="Wrapping Webkit (Part 1 - GTK+/Vala)"&gt;&amp;larr; Previous&lt;/a&gt;

        &lt;a class="btn" href="/archive"&gt;Archive&lt;/a&gt;

        &lt;a class="btn next disabled"&gt;Next &amp;rarr;&lt;/a&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    var disqus_developer = 1;
    var disqus_shortname = 'davedoesdev'; // required: replace example with your forum shortname
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href="http://disqus.com" class="dsq-brlink"&gt;blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;

  &lt;/div&gt;
  
  &lt;div class="span3"&gt;
    &lt;section&gt;
      &lt;h4&gt;Published&lt;/h4&gt;
      &lt;div class="date"&gt;&lt;span&gt;2013-01-27&lt;/span&gt;&lt;/div&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container_empty" &gt;
      &lt;h4&gt;Categories&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
      &lt;/ul&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container" &gt;
      &lt;h4&gt;Tags&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
          &lt;li&gt;
            &lt;a href="/tags#webkit-ref"&gt;webkit &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#html-ref"&gt;html &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#javascript-ref"&gt;javascript &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#qt-ref"&gt;qt &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#c++-ref"&gt;c++ &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;

      &lt;footer&gt;
        &lt;p&gt;&amp;copy; &lt;a href="mailto:dave@davedoesdev.com"&gt;David Halls&lt;span class="icon-envelope icon-white"&gt;&lt;/span&gt;&lt;/a&gt; 2013 
          with help from &lt;a href="http://ruhoh.com" target="_self" title="The Definitive Technical Blogging Framework"&gt;ruhoh&lt;/a&gt;,
          &lt;a href="http://twitter.github.com/bootstrap/" target="_self"&gt;Twitter Bootstrap&lt;/a&gt; and
          &lt;a href="http://www.glyphicons.com"&gt;Glyphicons&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;This site uses cookies for &lt;a href="http://www.getclicky.com/terms" target="_self"&gt;analytics&lt;/a&gt; and &lt;a href="http://help.disqus.com/customer/portal/articles/466259-privacy-policy" target="_self"&gt;commenting&lt;/a&gt;.&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;

    &lt;script&gt;
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66642016);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66642016ns.gif" /&gt;&lt;/p&gt;&lt;/noscript&gt;
    &lt;!-- Google Prettify --&gt;
&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/188.0.0/prettify.js"&gt;&lt;/script&gt;
&lt;script&gt;
  var pres = document.getElementsByTagName("pre");
  for (var i=0; i &lt; pres.length; ++i) {
    pres[i].className = "prettyprint ";
  }
  prettyPrint();
&lt;/script&gt;
&lt;!-- end Google Prettify --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    <item>
      <title>Wrapping Webkit (Part 1 - GTK+/Vala)</title>
      <link>http://www.davedoesdev.com/wrapping-webkit-part-1-gtk%2B-vala</link>
      <pubDate>2012-11-10</pubDate>
      <description>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Wrapping Webkit (Part 1 - GTK+/Vala) - Dave Does Dev&lt;/title&gt;
    &lt;meta name="author" content="David Halls"&gt;

    &lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap.min.css?0.6555116646033232" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap-responsive.min.css?0.7334719508129054" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css-social-buttons/zocial.stripped.css?0.48809324460467307" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/darkstrap.css?0.20609557335030737" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/style.css?0.08195818525341514" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/widgets/google_prettify/stylesheets/sunburst.css?0.2595982473663696" type="text/css" rel="stylesheet" media="all"&gt;

&lt;script src="/assets/my_hooligan/javascripts/jquery.min.js?0.4777611148170875"&gt;&lt;/script&gt;
&lt;script src="/assets/my_hooligan/javascripts/bootstrap.min.js?0.8954652444454354"&gt;&lt;/script&gt;
 
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="shortcut icon" href="/assets/media/favicon.ico"&gt;
    &lt;!-- fav and touch icons --&gt;
  &lt;!-- Update these with your own images
    &lt;link rel="shortcut icon" href="images/favicon.ico"&gt;
    &lt;link rel="apple-touch-icon" href="images/apple-touch-icon.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png"&gt;
  --&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class="navbar"&gt;
      &lt;div class="navbar-inner"&gt;
        &lt;div class="container"&gt;
          &lt;!-- .btn-navbar is used as the toggle for collapsed navbar content --&gt;
          &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/a&gt;      


          &lt;a class="brand" href="/"&gt;Dave Does Dev&lt;/a&gt;


          &lt;div class="nav-collapse"&gt;
            &lt;ul class="nav"&gt;
                
                  &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/about"&gt;About Me&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Github&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Twitter&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="hidden-desktop" target="_self"&gt;LinkedIn&lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="hidden-desktop" target="_self"&gt;RSS&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul class="nav pull-right social visible-desktop"&gt;
              &lt;li class="divider-vertical"&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="zocial github icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Github&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="zocial twitter icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Twitter&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="zocial linkedin icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;LinkedIn&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="zocial rss icon" target="_self"&gt;
                  &lt;span class="hidden-desktop"&gt;RSS&lt;/span&gt;
                &lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
      &lt;div class="content"&gt;
        &lt;div class="page-header"&gt;
  &lt;h1&gt;
    Wrapping Webkit (Part 1 - GTK+/Vala) 
  &lt;/h1&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;div class="span9"&gt;
    &lt;p&gt;I wanted to write a user interface in HTML and Javascript but run the rest of
the application in some other language that has access to system facilities.
Therefore I needed
bi-directional communication between the user interface and the application
logic. I also wanted to run it as a normal standalone application.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.gtk.org/"&gt;GTK+&lt;/a&gt; and &lt;a href="http://qt-project.org/"&gt;Qt&lt;/a&gt; both let you embed
the &lt;a href="http://www.webkit.org"&gt;Webkit&lt;/a&gt; browser engine to do this. Another option
is to run &lt;a href="http://www.chromium.org/Home"&gt;Chromium&lt;/a&gt; in kiosk mode.&lt;/p&gt;

&lt;p&gt;This post is about using GTK+&amp;#39;s Webkit component. Future posts will look at
Qt and Chromium.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Vala&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m not a big fan of C++. It&amp;#39;s much too complicated for me. Add in GTK+&amp;#39;s &lt;a href="http://www.demko.ca/blog/posts/200705_gtkmm_refcoutning.txt"&gt;wacky reference
counting&lt;/a&gt; and using
GTK+ to run Webkit from C++ gets a big no from me.&lt;/p&gt;

&lt;p&gt;Fortunately, there are &lt;a href="http://www.gtk.org/language-bindings.php"&gt;many other language bindings for GTK+&lt;/a&gt;. Although I could have used most of these, I wanted to
try something new - so I chose &lt;a href="https://live.gnome.org/Vala"&gt;Vala&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vala&amp;#39;s pretty interesting:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;#39;s statically typed.&lt;/li&gt;
&lt;li&gt;It&amp;#39;s a a lot like Java/C#, with a similar set of language features.&lt;/li&gt;
&lt;li&gt;But it&amp;#39;s compiled, via source translation to C.&lt;/li&gt;
&lt;li&gt;The only dependency it has is &lt;a href="http://developer.gnome.org/glib/"&gt;GLib&lt;/a&gt;,
which is available pretty much everywhere nowadays.&lt;/li&gt;
&lt;li&gt;It does the GTK+ reference counting for you.&lt;/li&gt;
&lt;li&gt;It&amp;#39;s officially supported by GNOME/GTK+.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What&amp;#39;s not to like?!&lt;/p&gt;

&lt;h1 id="toc_1"&gt;&lt;a id="example"&gt;&lt;/a&gt;Example&lt;/h1&gt;

&lt;p&gt;We&amp;#39;ll have two classes in our example:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A main class for parsing command line options and initializing things.&lt;/li&gt;
&lt;li&gt;A window class which embeds Webkit and puts it in a GTK+ window.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="toc_2"&gt;Main class&lt;/h2&gt;

&lt;p&gt;As with most languages, in Vala the startup function is called &lt;strong&gt;main&lt;/strong&gt; and
it&amp;#39;s declared as a static method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Gtk;

class WebkitExample.Main : GLib.Object
{
    public static int main(string[] args)
    {
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our example is going to support the following command line options:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;url&lt;/dt&gt;
&lt;dd&gt;which URL to load into Webkit&lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
&lt;dt&gt;fullscreen&lt;/dt&gt;
&lt;dd&gt;run in full screen (kiosk) mode&lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
&lt;dt&gt;hidecursor&lt;/dt&gt;
&lt;dd&gt;hide the mouse cursor&lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
&lt;dt&gt;debug&lt;/dt&gt;
&lt;dd&gt;enable the Webkit developer tools in the context menu&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;It also needs to create and show our window class (which embeds Webkit) and
initialize GTK+.&lt;/p&gt;

&lt;p&gt;First we set the defaults for the command line options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try
{
    url = &amp;quot;file://&amp;quot; + Path.get_dirname(FileUtils.read_link(&amp;quot;/proc/self/exe&amp;quot;)) + &amp;quot;/test.html&amp;quot;;
}
catch (FileError e)
{
    stderr.printf(&amp;quot;%s\n&amp;quot;, e.message);
    return 1;
}

fullscreen = false;
hidecursor = false;
debug = false;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;#39;ll see by default we load a file named &lt;strong&gt;test.html&lt;/strong&gt; in the same directory
as the program.&lt;/p&gt;

&lt;p&gt;Parsing command line options in Vala is pretty easy. You list the options in an
array, along with the type of argument expected (if any), some help text and in
which variable to put the argument. For our options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static string url;
static bool fullscreen;
static bool showcursor;
static bool debug;

const OptionEntry[] options =
{
    { &amp;quot;url&amp;quot;, &amp;#39;u&amp;#39;, 0, OptionArg.STRING, out url, &amp;quot;page to load&amp;quot;, &amp;quot;URL&amp;quot; },
    { &amp;quot;fullscreen&amp;quot;, &amp;#39;f&amp;#39;, 0, OptionArg.NONE, out fullscreen, &amp;quot;run in fullscreen mode&amp;quot;, null },
    { &amp;quot;hidecursor&amp;quot;, &amp;#39;h&amp;#39;, 0, OptionArg.NONE, out hidecursor, &amp;quot;hide mouse cursor&amp;quot;, null },
    { &amp;quot;debug&amp;quot;, &amp;#39;d&amp;#39;, 0, OptionArg.NONE, out debug, &amp;quot;enable web developer tools&amp;quot;, null },
    { null }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you create an &lt;strong&gt;OptionContext&lt;/strong&gt; with a description of the program,
and add the options to it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;OptionContext context = new OptionContext(&amp;quot;- Webkit example&amp;quot;);

context.add_main_entries(options, null);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To parse the options, call the &lt;strong&gt;parse&lt;/strong&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try
{
    context.parse(ref args);
}
catch (OptionError e)
{
    stderr.printf(&amp;quot;%s: failed to parse arguments: %s\n&amp;quot;, prog_name, e.message);
    return 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To initialize GTK+, we add an optional .gtkrc file (I don&amp;#39;t use it but it&amp;#39;s
good practice) and call &lt;strong&gt;Gtk.init&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gtk.rc_add_default_file(&amp;quot;webkit-example.gtkrc&amp;quot;);
Gtk.init(ref args);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can create our GTK+ window which embeds Webkit (see the next section
for details of our window class):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MainWindow w = new MainWindow(hidecursor, debug);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make it full screen if the command line option was passed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (fullscreen)
{
        w.fullscreen();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show it and all its children (including Webkit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w.show_all();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then load the URL into Webkit (this is a method on our window class which
ends up calling into Webkit):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;w.load(url);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we have to enter the GTK+ main loop which makes sure things are
displayed and user input events are dispatched properly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Gtk.main();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="toc_3"&gt;Window class&lt;/h2&gt;

&lt;p&gt;This class is going to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inherit from the GTK+ Window class so it&amp;#39;s a... erm... window.&lt;/li&gt;
&lt;li&gt;Create a new Webkit browser component and add it to the window.&lt;/li&gt;
&lt;li&gt;Configure things like the the window size and Webkit settings.&lt;/li&gt;
&lt;li&gt;Arrange for the mouse cursor to be hidden if the user requested to do so.&lt;/li&gt;
&lt;li&gt;Expose a function to Javascript running in Webkit which returns data read
from standard input. This shows we can get data from Vala into the Web app.&lt;/li&gt;
&lt;li&gt;Expose a function to Javascript running in Webkit which writes its argument to
standard output and then terminates the application. This shows we can call Vala
functions and pass them data from the Web app.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_4"&gt;Setting things up&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s how we declare our window class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WebkitExample.MainWindow : Window
{
    private const string TITLE = &amp;quot;Webkit Example&amp;quot;;

    private WebView webview;
    private Gdk.Cursor cursor;
    private static string data;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see we inherit from &lt;strong&gt;Window&lt;/strong&gt; and define a title which we&amp;#39;ll set 
below. There are private instance variables for a Webkit component (&lt;strong&gt;webview&lt;/strong&gt;),
an invisible mouse cursor (&lt;strong&gt;cursor&lt;/strong&gt;), and data read from standard
input (&lt;strong&gt;data&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Next we define the constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MainWindow (bool hidecursor, bool debug)
{  
    title = TITLE;
    set_default_size(800, 600);
    destroy.connect(Gtk.main_quit);

    if (hidecursor)
    {
        cursor = new Gdk.Cursor(Gdk.CursorType.BLANK_CURSOR);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simple stuff here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set the window title and size.&lt;/li&gt;
&lt;li&gt;Connect the &lt;strong&gt;destroy&lt;/strong&gt; event which is fired when the user closes the window
to &lt;strong&gt;Gtk.main_quit&lt;/strong&gt; function which exits the application.&lt;/li&gt;
&lt;li&gt;If the user wants to hide the cursor, set &lt;strong&gt;cursor&lt;/strong&gt; to an invisible cursor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we can create a Webkit component and initialize it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    webview = new WebView();

    WebSettings settings = webview.get_settings();

    settings.enable_plugins = true;
    settings.enable_scripts = true;
    settings.enable_universal_access_from_file_uris = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here I&amp;#39;m enabling plugins and scripts. I&amp;#39;m also enabling documents loaded from
the local system to make network calls. We won&amp;#39;t use it in this example but
you&amp;#39;ll need it if, for example, you have a user interface bundled with your
application that ends up talking to a Web service somewhere.&lt;/p&gt;

&lt;p&gt;Next we need to set up the Webkit developer tools (also known as the Web
inspector).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (debug)
{
    settings.enable_developer_extras = true;
    webview.web_inspector.inspect_web_view.connect(getInspectorView);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We enable the &lt;em&gt;Inspect Element&lt;/em&gt; option in the right-click menu of
the main Webkit component, which opens the Web inspector (and the rest of the
developer tools like the console and network tracer)&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;inspect_web_view&lt;/strong&gt; event is fired when the user selects the menu option.
We connect it to a method (&lt;strong&gt;getInspectorView&lt;/strong&gt;) which returns the Webkit
component we want the Webkit inspector to display itself in.
The &lt;strong&gt;getInspectorView&lt;/strong&gt; method is described in the next section.&lt;/p&gt;

&lt;p&gt;Now we need to connect up another event, &lt;strong&gt;window_object_cleared&lt;/strong&gt;. This is
fired by Webkit when a new page is loaded. We&amp;#39;ll connect it to a method which
exposes functions for Javascript in the page to call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;webview.window_object_cleared.connect(addApp);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ll get to &lt;strong&gt;addApp&lt;/strong&gt; a bit later on.&lt;/p&gt;

&lt;p&gt;Finally, we finish configuring Webkit and add it to the main window:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;get_default_session().add_feature_by_type = typeof(CookieJar);

ScrolledWindow sWindow = new ScrolledWindow(null, null);
sWindow.set_policy(PolicyType.AUTOMATIC, PolicyType.AUTOMATIC);

sWindow.add(webview);
add(sWindow);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see that we enable cookies and allow the Webkit component to scroll.&lt;/p&gt;

&lt;h2 id="toc_5"&gt;Returning a Webkit component for the Webkit inspector&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s &lt;strong&gt;getInspectorView&lt;/strong&gt;, which we hooked up to the &lt;strong&gt;inspect_web_view&lt;/strong&gt;
event in the constructor. 
This involves creating separate window and Webkit components for
the Web inspector:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public unowned WebView getInspectorView(WebView v)
{
    Window iWindow = new Window();
    WebView iWebview = new WebView();

    ScrolledWindow sWindow = new ScrolledWindow(null, null);
    sWindow.set_policy(PolicyType.AUTOMATIC, PolicyType.AUTOMATIC);

    sWindow.add(iWebview);
    iWindow.add(sWindow);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note I add the Webkit component (&lt;strong&gt;iWebview&lt;/strong&gt;) to a scrolled window (&lt;strong&gt;sWindow&lt;/strong&gt;)
so it doesn&amp;#39;t matter if it doesn&amp;#39;t all fit inside. I then add the scrolled
window to a top-level window (&lt;strong&gt;iWindow&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Next we set &lt;strong&gt;iWindow&lt;/strong&gt;&amp;#39;s title based on the main window&amp;#39;s title and its size
to the same as the main window&amp;#39;s size. Then we show &lt;strong&gt;iWindow&lt;/strong&gt;.
Finally we return &lt;strong&gt;iWebview&lt;/strong&gt; so the Web inspector uses it to display itself
in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    iWindow.title = title + &amp;quot; (Web Inspector)&amp;quot;;

    int width, height;
    get_size(out width, out height);
    iWindow.set_default_size(width, height);

    iWindow.show_all();

    iWindow.delete_event.connect(() =&amp;gt;
    {
        webview.web_inspector.close();
        return false;
    });

    unowned WebView r = iWebview;
    return r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note intercepting the &lt;strong&gt;delete_event&lt;/strong&gt; from the window in order to close the
Web inspector before the window is destroyed. I found I got segmentation faults
if I didn&amp;#39;t do this.&lt;/p&gt;

&lt;p&gt;Note also the &lt;strong&gt;unowned&lt;/strong&gt; keyword. This means there will be no reference count
on the Webkit component so it will be deleted once the user closes &lt;strong&gt;iWindow&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="toc_6"&gt;Hiding the mouse cursor&lt;/h2&gt;

&lt;p&gt;In the constructor, we set &lt;strong&gt;cursor&lt;/strong&gt; to an invisible cursor if the user asked
for the mouse cursor to be hidden. Let&amp;#39;s define a function to check if
&lt;strong&gt;cursor&lt;/strong&gt; was set and use it on the main window and Webkit component if it was:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private void hide_cursor()
{
    if (cursor != null)
    {
        window.set_cursor(cursor);
        webview.window.set_cursor(cursor);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found I had to call &lt;strong&gt;hide_cursor&lt;/strong&gt; in a couple of places. Firstly, whenever
the mouse is moved:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public override bool motion_notify_event(Gdk.EventMotion event)
{
    hide_cursor(); 

    if (base.motion_notify_event == null)
    {
        return false;
    }
    else
    {
        return base.motion_notify_event(event);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and secondly when the &lt;a href="#load"&gt;page is loaded&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="toc_7"&gt;Getting data from standard input&lt;/h2&gt;

&lt;p&gt;We want to read all of standard input and expose it to Javascript running in
Webkit. We&amp;#39;ll see in the next section how to expose functions for Javascript to
call. What we do first is start a thread which reads from standard input:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static construct
{
    try
    {
        Thread.create&amp;lt;void*&amp;gt;(() =&amp;gt;
        {
            StringBuilder sb = new StringBuilder();
            char buffer[1024];

            while (!stdin.eof())
            {
                string s = stdin.gets(buffer);

                if (s != null)
                {
                    sb.append(s);
                }
            }

            lock (data)
            {
                data = sb.str;
            }

            return null;
        }, false);
    }
    catch (ThreadError e)
    {
        stderr.printf(&amp;quot;%s: failed to create data reader thread: %s\n&amp;quot;, Main.prog_name, e.message);
        Gtk.main_quit();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is only run once, when the &lt;strong&gt;MainWindow&lt;/strong&gt; class is first used. We
build up a string buffer from standard input until end-of-file is reached.&lt;/p&gt;

&lt;p&gt;Then we set the &lt;strong&gt;data&lt;/strong&gt; class variable that we declared at the top of the class
to the contents of the string buffer. Note we take out a &lt;strong&gt;lock&lt;/strong&gt; on &lt;strong&gt;data&lt;/strong&gt;
first because we&amp;#39;re going to be reading it from a different thread:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static JSCore.Value getData(JSCore.Context ctx,
                                   JSCore.Object function,
                                   JSCore.Object thisObject,
                                   JSCore.ConstValue[] arguments,
                                   out JSCore.Value exception)
{
    exception = null;

    lock (data)
    {
        return new JSCore.Value.string(ctx, new JSCore.String.with_utf8_c_string(data));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;#39;ll be calling this function from Javascript and exposing it to Webkit in the
next section. It simply returns &lt;strong&gt;data&lt;/strong&gt; to Javascript.&lt;/p&gt;

&lt;h2 id="toc_8"&gt;Passing data to Javascript&lt;/h2&gt;

&lt;p&gt;The cleanest way to pass data to Javascript is to expose functions for
Javascript to call when it&amp;#39;s ready to do so. You can then return the data from
those functions.&lt;/p&gt;

&lt;p&gt;In the constructor for &lt;strong&gt;MainWindow&lt;/strong&gt;, we arranged for a method called
&lt;strong&gt;addApp&lt;/strong&gt; to be called whenever Webkit loaded a new page. Here&amp;#39;s the start
of &lt;strong&gt;addApp&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void addApp(WebFrame frame, void *context, void *window_object)
{
    unowned JSCore.Context ctx = (JSCore.Context) context;
    JSCore.Object global = ctx.get_global_object();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we get the global object from the Javascript context that&amp;#39;s passed to us.
This represents the global variables in the page our Webkit component (&lt;strong&gt;webview&lt;/strong&gt;) has loaded.&lt;/p&gt;

&lt;p&gt;We can then use this to expose the &lt;strong&gt;getData&lt;/strong&gt; method we defined in the previous
section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    JSCore.String name = new JSCore.String.with_utf8_c_string(&amp;quot;app_getData&amp;quot;);
    JSCore.Value ex;

    global.set_property(ctx,
                        name,
                        new JSCore.Object.function_with_callback(ctx, name, getData),
                        JSCore.PropertyAttribute.ReadOnly,
                        out ex);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Javascript, &lt;strong&gt;getData&lt;/strong&gt; will be available as &lt;strong&gt;app_getData&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="toc_9"&gt;Receiving data from Javascript&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s continue the definition of &lt;strong&gt;addApp&lt;/strong&gt; from the previous section to expose
a method, &lt;strong&gt;exit&lt;/strong&gt;, which Javascript can call to exit the application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    name = new JSCore.String.with_utf8_c_string(&amp;quot;app_exit&amp;quot;);

    global.set_property(ctx,
                        name,
                        new JSCore.Object.function_with_callback(ctx, name, exit),
                        JSCore.PropertyAttribute.ReadOnly,
                        out ex);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;exit&lt;/strong&gt; will take an argument, which it will print to standard output before
exiting the application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static JSCore.Value exit(JSCore.Context ctx,
                                JSCore.Object function,
                                JSCore.Object thisObject,
                                JSCore.ConstValue[] arguments,
                                out JSCore.Value exception)
{
    exception = null;

    JSCore.String js_string = arguments[0].to_string_copy(ctx, null);

    size_t max_size = js_string.get_maximum_utf8_c_string_size();
    char *c_string = new char[max_size];
    js_string.get_utf8_c_string(c_string, max_size);

    stdout.printf(&amp;quot;%s\n&amp;quot;, (string) c_string);

    Gtk.main_quit();

    return new JSCore.Value.null(ctx);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, we have to convert the Javascript string argument to UTF-8.
You&amp;#39;ll need a UTF-8 locale set up to display the string if you use
any Unicode characters.&lt;/p&gt;

&lt;h2 id="toc_10"&gt;&lt;a id="load"&gt;&lt;/a&gt;Loading a page&lt;/h2&gt;

&lt;p&gt;Finally, we need to define the &lt;strong&gt;load&lt;/strong&gt; method which allows users of
&lt;strong&gt;MainWindow&lt;/strong&gt; to specify the page which will be loaded into Webkit:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void load(string url)
{
    webview.open(url);
    hide_cursor();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It just calls the &lt;strong&gt;open&lt;/strong&gt; method of our Webkit component and then hides the
cursor (if necessary).&lt;/p&gt;

&lt;h2 id="toc_11"&gt;Compiling&lt;/h2&gt;

&lt;p&gt;That&amp;#39;s it for the Vala code but there are a couple of other things to do before
we can compile it and get a binary we can run.&lt;/p&gt;

&lt;p&gt;Firstly, the class and type definitions for interoperating with Javascript
aren&amp;#39;t built into Vala. They have to be defined separately. This is done by
&lt;a href="https://live.gnome.org/Vala/Tutorial#Binding_Libraries_with_VAPI_Files"&gt;defining them in a VAPI file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I won&amp;#39;t go into the details here, but the hard
work has already been done by Sam Thursfield and is available &lt;a href="http://gitorious.org/seed-vapi/seed-vapi/blobs/master/javascriptcore.vapi"&gt;here&lt;/a&gt;.
I had to make a few patches, which are available &lt;a href="https://gist.github.com/4058053#file-javascriptcore-vapi-patch"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Secondly, when you compile a Vala program, especially one which uses some
complex types, it&amp;#39;s fairly common to get warnings about const and type
incompatibility from the C compiler (remember Vala is translated into C).
Most people ignore these but I like to compile without warnings. I&amp;#39;ve adopted a
rather skanky workaround to do this. Basically, I insert a script to fix up the
types in the generated C source code.&lt;/p&gt;

&lt;p&gt;You can find all the source from this article &lt;a href="https://gist.github.com/4058053"&gt;here&lt;/a&gt;. You&amp;#39;ll also find a working
Makefile, a patched version of the Javascript VAPI file, my skanky workaround script
and the test Web page described in the next section.&lt;/p&gt;

&lt;h2 id="toc_12"&gt;&lt;a id="test_page"&gt;&lt;/a&gt;Test Web page&lt;/h2&gt;

&lt;p&gt;Finally, let&amp;#39;s take a look at a Web page we can load into our example
application. It needs to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Call &lt;strong&gt;app_getData&lt;/strong&gt; periodically until it returns something other than the
empty string. This will be the data read from standard input and we&amp;#39;ll display
it in the page once it&amp;#39;s read.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Call &lt;strong&gt;app_exit&lt;/strong&gt; at some point, passing in a message which the application
will write to standard output before exiting. We&amp;#39;ll do this when the user
presses a button.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The HTML turns out to be pretty simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
function check_data()
{
    var data = app_getData();

    if (data === &amp;quot;&amp;quot;)
    {
        setTimeout(check_data, 1000);
    }
    else
    {
        document.getElementById(&amp;#39;data&amp;#39;).innerText = data;
    }
}
&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body onload=&amp;#39;check_data()&amp;#39;&amp;gt;
&amp;lt;p&amp;gt;
data: &amp;lt;span id=&amp;quot;data&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;Exit&amp;quot; onclick=&amp;quot;app_exit(&amp;#39;goodbye from Javascript&amp;#39;)&amp;quot;&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We poll &lt;strong&gt;app_getData&lt;/strong&gt; every second once the page has loaded. When we have the
data from standard input, we display it in the &lt;strong&gt;#data&lt;/strong&gt; element.&lt;/p&gt;

&lt;p&gt;When the user clicks on the &lt;strong&gt;Exit&lt;/strong&gt; button, we call &lt;strong&gt;app_exit&lt;/strong&gt; with a
message.&lt;/p&gt;

&lt;p&gt;You can test it by piping some data through to the &lt;strong&gt;webkit-example&lt;/strong&gt; binary
you get by building the &lt;a href="https://gist.github.com/4058053"&gt;source&lt;/a&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;#39;Hello World!&amp;#39; | ./webkit-example
&lt;/code&gt;&lt;/pre&gt;

    &lt;hr&gt;
    &lt;div class="pagination pagination-centered btn-group"&gt;
        &lt;a class="btn prev" href="/vu-meter" title="Vu Meter"&gt;&amp;larr; Previous&lt;/a&gt;

        &lt;a class="btn" href="/archive"&gt;Archive&lt;/a&gt;

        &lt;a class="btn next" href="/wrapping-webkit-part-2-qt-c%2B%2B" title="Wrapping Webkit (Part 2 - Qt/C++)"&gt;Next &amp;rarr;&lt;/a&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    var disqus_developer = 1;
    var disqus_shortname = 'davedoesdev'; // required: replace example with your forum shortname
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href="http://disqus.com" class="dsq-brlink"&gt;blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;

  &lt;/div&gt;
  
  &lt;div class="span3"&gt;
    &lt;section&gt;
      &lt;h4&gt;Published&lt;/h4&gt;
      &lt;div class="date"&gt;&lt;span&gt;2012-11-10&lt;/span&gt;&lt;/div&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container_empty" &gt;
      &lt;h4&gt;Categories&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
      &lt;/ul&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container" &gt;
      &lt;h4&gt;Tags&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
          &lt;li&gt;
            &lt;a href="/tags#webkit-ref"&gt;webkit &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#html-ref"&gt;html &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#javascript-ref"&gt;javascript &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#gtk-ref"&gt;gtk &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#vala-ref"&gt;vala &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;

      &lt;footer&gt;
        &lt;p&gt;&amp;copy; &lt;a href="mailto:dave@davedoesdev.com"&gt;David Halls&lt;span class="icon-envelope icon-white"&gt;&lt;/span&gt;&lt;/a&gt; 2013 
          with help from &lt;a href="http://ruhoh.com" target="_self" title="The Definitive Technical Blogging Framework"&gt;ruhoh&lt;/a&gt;,
          &lt;a href="http://twitter.github.com/bootstrap/" target="_self"&gt;Twitter Bootstrap&lt;/a&gt; and
          &lt;a href="http://www.glyphicons.com"&gt;Glyphicons&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;This site uses cookies for &lt;a href="http://www.getclicky.com/terms" target="_self"&gt;analytics&lt;/a&gt; and &lt;a href="http://help.disqus.com/customer/portal/articles/466259-privacy-policy" target="_self"&gt;commenting&lt;/a&gt;.&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;

    &lt;script&gt;
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66642016);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66642016ns.gif" /&gt;&lt;/p&gt;&lt;/noscript&gt;
    &lt;!-- Google Prettify --&gt;
&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/188.0.0/prettify.js"&gt;&lt;/script&gt;
&lt;script&gt;
  var pres = document.getElementsByTagName("pre");
  for (var i=0; i &lt; pres.length; ++i) {
    pres[i].className = "prettyprint ";
  }
  prettyPrint();
&lt;/script&gt;
&lt;!-- end Google Prettify --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    <item>
      <title>Vu Meter</title>
      <link>http://www.davedoesdev.com/vu-meter</link>
      <pubDate>2012-10-07</pubDate>
      <description>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Vu Meter - Dave Does Dev&lt;/title&gt;
    &lt;meta name="author" content="David Halls"&gt;

    &lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap.min.css?0.6560360981055543" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap-responsive.min.css?0.1387652795050346" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css-social-buttons/zocial.stripped.css?0.24897521245299958" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/darkstrap.css?0.4089999947761277" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/style.css?0.11676262714296692" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/widgets/google_prettify/stylesheets/sunburst.css?0.28221935377855567" type="text/css" rel="stylesheet" media="all"&gt;

&lt;script src="/assets/my_hooligan/javascripts/jquery.min.js?0.8301866141226507"&gt;&lt;/script&gt;
&lt;script src="/assets/my_hooligan/javascripts/bootstrap.min.js?0.6053655151681001"&gt;&lt;/script&gt;
 
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="shortcut icon" href="/assets/media/favicon.ico"&gt;
    &lt;!-- fav and touch icons --&gt;
  &lt;!-- Update these with your own images
    &lt;link rel="shortcut icon" href="images/favicon.ico"&gt;
    &lt;link rel="apple-touch-icon" href="images/apple-touch-icon.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png"&gt;
  --&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class="navbar"&gt;
      &lt;div class="navbar-inner"&gt;
        &lt;div class="container"&gt;
          &lt;!-- .btn-navbar is used as the toggle for collapsed navbar content --&gt;
          &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/a&gt;      


          &lt;a class="brand" href="/"&gt;Dave Does Dev&lt;/a&gt;


          &lt;div class="nav-collapse"&gt;
            &lt;ul class="nav"&gt;
                
                  &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/about"&gt;About Me&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Github&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Twitter&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="hidden-desktop" target="_self"&gt;LinkedIn&lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="hidden-desktop" target="_self"&gt;RSS&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul class="nav pull-right social visible-desktop"&gt;
              &lt;li class="divider-vertical"&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="zocial github icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Github&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="zocial twitter icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Twitter&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="zocial linkedin icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;LinkedIn&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="zocial rss icon" target="_self"&gt;
                  &lt;span class="hidden-desktop"&gt;RSS&lt;/span&gt;
                &lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
      &lt;div class="content"&gt;
        &lt;div class="page-header"&gt;
  &lt;h1&gt;
    Vu Meter 
  &lt;/h1&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;div class="span9"&gt;
    &lt;p&gt;I wanted a large on-screen volume indicator showing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The microphone amplification level, changing as you adjust it (by pressing
keys, for example).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whether the microphone is muted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The current microphone level, changing as you speak into the microphone.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s what I did.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;xosdd&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://sourceforge.net/projects/libxosd/"&gt;XOSD&lt;/a&gt; does the real work here.
It displays text anywhere on your X desktop and it looks like an old skool TV/VCR&amp;#39;s
display.&lt;/p&gt;

&lt;p&gt;XOSD is a library to build into your own projects. &lt;a href="http://phintsan.kapsi.fi/xosdd.html"&gt;xosdd&lt;/a&gt; puts XOSD into a daemon which listens on a named pipe for
commands using a custom protocol.&lt;/p&gt;

&lt;p&gt;I made a &lt;a href="https://gist.github.com/3847336#file-xosdd-0-0-patch"&gt;2-line patch&lt;/a&gt; to xosdd in order to support display of text in the centre of the screen.&lt;/p&gt;

&lt;p&gt;First, I created some named pipes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for p in /tmp/{audio,display,vumeter,level}_control
do
  if ! test -p &amp;quot;$p&amp;quot;
  then
    mkfifo &amp;quot;$p&amp;quot;
  fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;display_control&lt;/strong&gt; and &lt;strong&gt;vumeter_control&lt;/strong&gt; are for communicating with xosdd:&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;/tmp/display_control&lt;/dt&gt;
&lt;dd&gt;For commands to display the microphone amplification level and muted state.&lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
&lt;dt&gt;/tmp/vumeter_control&lt;/dt&gt;
&lt;dd&gt;For commands to display the current microphone level.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;audio_control&lt;/strong&gt; and &lt;strong&gt;level_control&lt;/strong&gt; are for receving user input and
capturing raw microphone level data. They won&amp;#39;t be used with xosdd directly
but by processes which sit in front of xosdd.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;/tmp/audio_control&lt;/dt&gt;
&lt;dd&gt;For user actions: microphone volume up/down, mute/unmute and turn current level monitoring on/off. These will be sent when the user presses
corresponding keys on the keyboard.&lt;/dd&gt;
&lt;/dl&gt;

&lt;dl&gt;
&lt;dt&gt;/tmp/level_control&lt;/dt&gt;
&lt;dd&gt;For raw microphone level data.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;I ran xosdd twice - once for displaying the amplification level and muted state
and once for displaying the current level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xosdd -l 4 -t 2 -f &amp;#39;-*-terminus-bold-r-*-*-*-240-100-100-*-*-*-*&amp;#39; /tmp/display_control &amp;amp;

cat &amp;gt; /tmp/display_control &amp;lt;&amp;lt;EOF
align center
pos middle
EOF

xosdd -l 4 -f &amp;#39;-*-terminus-bold-r-*-*-*-240-100-100-*-*-*-*&amp;#39; /tmp/vumeter_control &amp;amp;

cat &amp;gt; /tmp/vumeter_control &amp;lt;&amp;lt;EOF
color orange
align center
pos middle
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both default to displaying information in the centre of the screen. I used the
&lt;a href="http://terminus-font.sourceforge.net"&gt;Terminus&lt;/a&gt; font here but you may wish to
use something else. XOSD only supports bitmap fonts.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Displaying amplification level and muted state&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s define a bash function which we can call at any time to get xosdd to
display the microphone volume level and whether it&amp;#39;s muted.&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll need to set &lt;strong&gt;ctlIn&lt;/strong&gt; to the name of your microphone under ALSA.
Run &lt;strong&gt;amixer&lt;/strong&gt; without arguments to list all your devices. On one of my systems
it&amp;#39;s called &lt;strong&gt;Mic&lt;/strong&gt;, on another it&amp;#39;s called &lt;strong&gt;Capture&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function display_input
{
  amixer get &amp;quot;$ctlIn&amp;quot; | egrep -o &amp;#39;([0-9]+%)|(\[off\])&amp;#39; |
  {
  local state=On color=yellow percent
  while read v
  do
    if test &amp;quot;$v&amp;quot; = &amp;quot;[off]&amp;quot;
    then
      state=Off
      color=red
    else
      percent=&amp;quot;$v&amp;quot;
    fi
  done
  cat &amp;gt; /tmp/display_control &amp;lt;&amp;lt;EOF
color $color
string 0 &amp;quot;Microphone: $state&amp;quot;
bar 1 $percent
EOF
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we&amp;#39;re doing is calling &lt;strong&gt;amixer&lt;/strong&gt; to get information about the device
and filtering for amplification level and muted state. Note the egrep option
&lt;strong&gt;-o&lt;/strong&gt; outputs each match &lt;em&gt;part&lt;/em&gt; on a separate line.&lt;/p&gt;

&lt;p&gt;If the microphone is muted, the colour is set to red; unmuted is yellow.
We display text for the muted state on the first line and a bar indicating
the amplification level on the second.&lt;/p&gt;

&lt;h2 id="toc_2"&gt;Monitoring current microphone level&lt;/h2&gt;

&lt;p&gt;This is a bit more complicated but not too bad. Basically, we want to read
raw microphone level data from &lt;strong&gt;/tmp/level_control&lt;/strong&gt; and turn it into commands
for xosdd on &lt;strong&gt;tmp/vumeter_control&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;At the same time, we want to keep the amplification and muted state display
updated so the user can press microphone up/down keys and see both the
amplification and current levels change.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(
while true
do
  gawk &amp;#39;/^.+%$/ {print &amp;quot;&amp;quot;; fflush(); printf(&amp;quot;string 2 \&amp;quot;Current Level\&amp;quot;\nbar 3 %s\n&amp;quot;, $NF) &amp;gt;&amp;quot;/tmp/vumeter_control&amp;quot;; close(&amp;quot;/tmp/vumeter_control&amp;quot;)}&amp;#39; /tmp/level_control |
  (
  first=yes
  while read
  do
    if test $first = yes
    then
      echo &amp;#39;timeout -1&amp;#39; &amp;gt; /tmp/display_control
      first=no
    fi
    display_input
  done
  echo hide &amp;gt; /tmp/vumeter_control
  echo -e &amp;#39;hide\ntimeout 2&amp;#39; &amp;gt; /tmp/display_control
  )
done
) &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Node that we need to disable the &lt;strong&gt;timeout&lt;/strong&gt; on the amplification and muted
display while monitoring is active.&lt;br&gt;
When we stop receiving raw microphone level data, both displays are
hidden straight away. &lt;/p&gt;

&lt;h2 id="toc_3"&gt;Main control loop&lt;/h2&gt;

&lt;p&gt;Now we need to control the microphone displays. We want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Allow the user to increase and decrease the microphone amplification level
and then display the level on the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mute and unmute the microphone and display the status on the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start and stop monitoring of the current microphone level, and its display.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s how we do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while true
do
  exec 3&amp;lt; /tmp/audio_control
  while read cmd &amp;lt;&amp;amp;3
  do
    case $cmd in
      d)
        amixer -q set &amp;quot;$ctlIn&amp;quot; ${ctlDelta}-
        display_input
        ;;

      u)
        amixer -q set &amp;quot;$ctlIn&amp;quot; ${ctlDelta}+
        display_input
        ;;

      t)
        amixer -q set &amp;quot;$ctlIn&amp;quot; toggle
        display_input
        ;;

      m)
        if test &amp;quot;$recpid&amp;quot;
        then
          kill $recpid
          unset recpid
        else
          arecord -vvv /dev/null -V mono &amp;gt; /tmp/level_control &amp;amp;
          recpid=$!
        fi
        ;;
    esac
  done
  exec 3&amp;lt;&amp;amp;-
done
) &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;arecord&lt;/strong&gt; command supplies raw microphone level data.&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll have to set &lt;strong&gt;ctlDelta&lt;/strong&gt; to the amount you want the microphone level
changed when &lt;strong&gt;d&lt;/strong&gt; and &lt;strong&gt;u&lt;/strong&gt; commands are received. This will either be a
percentage (e.g. 5%) or a number (e.g. 1) depending on your audio device.
You&amp;#39;ll have to try both to see what works for you.&lt;/p&gt;

&lt;h2 id="toc_4"&gt;Keyboard control&lt;/h2&gt;

&lt;p&gt;As you&amp;#39;ll have noticed, everything is controlled through sending single-letter
commands through &lt;strong&gt;/tmp/audio_control&lt;/strong&gt;.
We could make the user echo data through this named pipe but that wouldn&amp;#39;t be very
convenient.&lt;/p&gt;

&lt;p&gt;Better to send a command when the user presses a key on the keyboard.
How you do this will depend on your environment.&lt;/p&gt;

&lt;p&gt;The window manager I use is &lt;a href="http://www.icewm.org"&gt;IceWM&lt;/a&gt;. It has a
&lt;strong&gt;$HOME/.icewm/keys&lt;/strong&gt; file where you can specify commands to run when a key
is pressed.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my &lt;strong&gt;$HOME/.icewm/keys&lt;/strong&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;key &amp;quot;XF86AudioRaiseVolume&amp;quot; sh -c &amp;quot;test -p /tmp/audio_control &amp;amp;&amp;amp; echo u &amp;gt; /tmp/audio_control&amp;quot;
key &amp;quot;XF86AudioLowerVolume&amp;quot; sh -c &amp;quot;test -p /tmp/audio_control &amp;amp;&amp;amp; echo d &amp;gt; /tmp/audio_control&amp;quot;
key &amp;quot;XF86AudioMute&amp;quot; sh -c &amp;quot;test -p /tmp/audio_control &amp;amp;&amp;amp; echo t &amp;gt; /tmp/audio_control&amp;quot;
key &amp;quot;F12&amp;quot; sh -c &amp;quot;test -p /tmp/audio_control &amp;amp;&amp;amp; echo m &amp;gt; /tmp/audio_control&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The volume up (&lt;strong&gt;XF86AudioRaiseVolume&lt;/strong&gt;) and down (&lt;strong&gt;XF86AudioLowerVolume&lt;/strong&gt;)
keys on the keyboard send the &lt;strong&gt;u&lt;/strong&gt; and &lt;strong&gt;d&lt;/strong&gt; commands through &lt;strong&gt;/tmp/audio_control&lt;/strong&gt; - resulting in the microphone volume being increased or decreased and
the level displayed on the screen.&lt;/p&gt;

&lt;p&gt;The mute key (&lt;strong&gt;XF86AudioMute&lt;/strong&gt;) key sends the &lt;strong&gt;t&lt;/strong&gt; command through &lt;strong&gt;/tmp/audio_control&lt;/strong&gt;, resulting in the
microphone being muted or unmuted and the status displayed on the screen.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;F12&lt;/strong&gt; key sends the &lt;strong&gt;m&lt;/strong&gt; command through &lt;strong&gt;/tmp/audio_control&lt;/strong&gt;.
This starts displaying the current microphone level on the screen, changing
in real time as you speak into it. Press &lt;strong&gt;F12&lt;/strong&gt; again to stop monitoring the
microphone level.&lt;/p&gt;

&lt;h2 id="toc_5"&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;The complete script is &lt;a href="https://gist.github.com/3847759#file-vu-meter-sh"&gt;here&lt;/a&gt;. Remember you need to set &lt;strong&gt;ctlIn&lt;/strong&gt; and &lt;strong&gt;ctlDelta&lt;/strong&gt; for
your device at the top.
The script calls &lt;strong&gt;rkill.sh&lt;/strong&gt; from my &lt;a href="/script-cleanup"&gt;previous post&lt;/a&gt;
to clean things up at the end - press ^C or Enter to exit.&lt;/p&gt;

&lt;p&gt;Finally, here are some screenshots of my Vu Meter in action:&lt;/p&gt;

&lt;p&gt;&lt;a href="/assets/media/vu-meter/mic-on.png"&gt;&lt;img src="/assets/media/vu-meter/mic-on.png" alt="Microphone On" title="Microphone On"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="/assets/media/vu-meter/mic-mon.png"&gt;&lt;img src="/assets/media/vu-meter/mic-mon.png" alt="Microphone Monitor" title="Microphone Off"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="/assets/media/vu-meter/mic-off.png"&gt;&lt;img src="/assets/media/vu-meter/mic-off.png" alt="Microphone Off" title="Microphone Monitor"&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;hr&gt;
    &lt;div class="pagination pagination-centered btn-group"&gt;
        &lt;a class="btn prev" href="/script-cleanup" title="Script Cleanup"&gt;&amp;larr; Previous&lt;/a&gt;

        &lt;a class="btn" href="/archive"&gt;Archive&lt;/a&gt;

        &lt;a class="btn next" href="/wrapping-webkit-part-1-gtk%2B-vala" title="Wrapping Webkit (Part 1 - GTK+/Vala)"&gt;Next &amp;rarr;&lt;/a&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    var disqus_developer = 1;
    var disqus_shortname = 'davedoesdev'; // required: replace example with your forum shortname
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href="http://disqus.com" class="dsq-brlink"&gt;blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;

  &lt;/div&gt;
  
  &lt;div class="span3"&gt;
    &lt;section&gt;
      &lt;h4&gt;Published&lt;/h4&gt;
      &lt;div class="date"&gt;&lt;span&gt;2012-10-07&lt;/span&gt;&lt;/div&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container_empty" &gt;
      &lt;h4&gt;Categories&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
      &lt;/ul&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container_empty" &gt;
      &lt;h4&gt;Tags&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;

      &lt;footer&gt;
        &lt;p&gt;&amp;copy; &lt;a href="mailto:dave@davedoesdev.com"&gt;David Halls&lt;span class="icon-envelope icon-white"&gt;&lt;/span&gt;&lt;/a&gt; 2013 
          with help from &lt;a href="http://ruhoh.com" target="_self" title="The Definitive Technical Blogging Framework"&gt;ruhoh&lt;/a&gt;,
          &lt;a href="http://twitter.github.com/bootstrap/" target="_self"&gt;Twitter Bootstrap&lt;/a&gt; and
          &lt;a href="http://www.glyphicons.com"&gt;Glyphicons&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;This site uses cookies for &lt;a href="http://www.getclicky.com/terms" target="_self"&gt;analytics&lt;/a&gt; and &lt;a href="http://help.disqus.com/customer/portal/articles/466259-privacy-policy" target="_self"&gt;commenting&lt;/a&gt;.&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;

    &lt;script&gt;
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66642016);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66642016ns.gif" /&gt;&lt;/p&gt;&lt;/noscript&gt;
    &lt;!-- Google Prettify --&gt;
&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/188.0.0/prettify.js"&gt;&lt;/script&gt;
&lt;script&gt;
  var pres = document.getElementsByTagName("pre");
  for (var i=0; i &lt; pres.length; ++i) {
    pres[i].className = "prettyprint ";
  }
  prettyPrint();
&lt;/script&gt;
&lt;!-- end Google Prettify --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    <item>
      <title>Script Cleanup</title>
      <link>http://www.davedoesdev.com/script-cleanup</link>
      <pubDate>2012-09-29</pubDate>
      <description>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Script Cleanup - Dave Does Dev&lt;/title&gt;
    &lt;meta name="author" content="David Halls"&gt;

    &lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap.min.css?0.1722023873546813" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap-responsive.min.css?0.7449750273959219" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css-social-buttons/zocial.stripped.css?0.868487510641824" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/darkstrap.css?0.9402365578369063" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/style.css?0.3490278912352418" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/widgets/google_prettify/stylesheets/sunburst.css?0.44270129543011427" type="text/css" rel="stylesheet" media="all"&gt;

&lt;script src="/assets/my_hooligan/javascripts/jquery.min.js?0.6642408406708293"&gt;&lt;/script&gt;
&lt;script src="/assets/my_hooligan/javascripts/bootstrap.min.js?0.10790193285640581"&gt;&lt;/script&gt;
 
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="shortcut icon" href="/assets/media/favicon.ico"&gt;
    &lt;!-- fav and touch icons --&gt;
  &lt;!-- Update these with your own images
    &lt;link rel="shortcut icon" href="images/favicon.ico"&gt;
    &lt;link rel="apple-touch-icon" href="images/apple-touch-icon.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png"&gt;
  --&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class="navbar"&gt;
      &lt;div class="navbar-inner"&gt;
        &lt;div class="container"&gt;
          &lt;!-- .btn-navbar is used as the toggle for collapsed navbar content --&gt;
          &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/a&gt;      


          &lt;a class="brand" href="/"&gt;Dave Does Dev&lt;/a&gt;


          &lt;div class="nav-collapse"&gt;
            &lt;ul class="nav"&gt;
                
                  &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/about"&gt;About Me&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Github&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Twitter&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="hidden-desktop" target="_self"&gt;LinkedIn&lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="hidden-desktop" target="_self"&gt;RSS&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul class="nav pull-right social visible-desktop"&gt;
              &lt;li class="divider-vertical"&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="zocial github icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Github&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="zocial twitter icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Twitter&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="zocial linkedin icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;LinkedIn&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="zocial rss icon" target="_self"&gt;
                  &lt;span class="hidden-desktop"&gt;RSS&lt;/span&gt;
                &lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
      &lt;div class="content"&gt;
        &lt;div class="page-header"&gt;
  &lt;h1&gt;
    Script Cleanup 
  &lt;/h1&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;div class="span9"&gt;
    &lt;p&gt;Sometimes I like to write complicated &lt;a href="http://www.gnu.org/software/bash/bash.html"&gt;Bash&lt;/a&gt; scripts. You know the ones - multiple background subprocesses,
communicating through pipes or fifos. In fact, my next post will be about
one I&amp;#39;ve written recently.&lt;/p&gt;

&lt;p&gt;At the end of the script, you have to make sure all those background processes
are killed.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;rkill.sh&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve pulled code to do this out into a separate file, &lt;a href="https://gist.github.com/3808428#file-rkill-sh"&gt;rkill.sh&lt;/a&gt;.
It&amp;#39;s listed below, but I&amp;#39;ve split it into sections here to make it easier to
explain.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

function contains
{
  local arr=(&amp;quot;${!1}&amp;quot;)

  for v in &amp;quot;${arr[@]}&amp;quot;
  do
    if test &amp;quot;$v&amp;quot; = &amp;quot;$2&amp;quot;
    then
      return 0
    fi
  done

  return 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;contains&lt;/strong&gt; function returns 0 if its second argument is in the array whose
name is passed as the first argument. Otherwise it returns 1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function rkill
{
  local pid=$1 p d s

  done_pids=(&amp;quot;${done_pids[@]}&amp;quot; $pid)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;rkill&lt;/strong&gt; function is where the action happens. It takes one parameter -
the ID of the process at the root of the tree to kill (&lt;strong&gt;pid&lt;/strong&gt;). This is added
to the list of processes already dealt with so we don&amp;#39;t end up in a loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if test $pid -eq $BASHPID
  then
    return
  fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;#39;t kill the process running this script!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if ! contains skip[@] $pid
  then
    kill -s STOP $pid
    while true
    do
      s=$(ps -o pid,stat | grep $pid | awk &amp;#39;{print substr($NF, 0, 1)}&amp;#39;)
      if test -z &amp;quot;$s&amp;quot; -o &amp;quot;$s&amp;quot; = T
      then
        break
      fi
      sleep 1
    done
  fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;strong&gt;skip&lt;/strong&gt; array can contain a list of processes not to kill. If &lt;strong&gt;pid&lt;/strong&gt;
isn&amp;#39;t in this list, then suspend it so it doesn&amp;#39;t continue to create new
children. We also wait until &lt;strong&gt;ps&lt;/strong&gt; shows the process is suspended.&lt;/p&gt;

&lt;p&gt;Then, even if we skip a process, we recurse to its children:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  while true
  do
    d=0

    for p in $(pgrep -P $pid)
    do
      if ! contains done_pids[@] $p
      then
        d=1
        rkill $p
        break
      fi
    done

    if test $d -eq 0
    then
      break
    fi
  done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we do is find all the children of &lt;strong&gt;pid&lt;/strong&gt; and call &lt;strong&gt;rkill&lt;/strong&gt; on
each of them, checking we haven&amp;#39;t seen a process before recursing.&lt;/p&gt;

&lt;p&gt;We keep going until there are no child processes left that we haven&amp;#39;t seen
before.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  if ! contains skip[@] $pid
  then
    if ! contains nokill[@] $pid
    then
      kill $pid
    fi
    kill -s CONT $pid
  fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if we&amp;#39;re not skipping &lt;strong&gt;pid&lt;/strong&gt; and it&amp;#39;s not in the &lt;strong&gt;nokill&lt;/strong&gt; array
then we kill it. We need to resume the process even after killing it so it can
die.&lt;/p&gt;

&lt;p&gt;Note that &lt;strong&gt;nokill&lt;/strong&gt; is slightly different to &lt;strong&gt;skip&lt;/strong&gt;. A &lt;strong&gt;nokill&lt;/strong&gt; process
is suspended while its children are killed; a &lt;strong&gt;skip&lt;/strong&gt; process is not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for arg in &amp;quot;$@&amp;quot;
do
  case $arg in
    --skip=*) skip=(&amp;quot;${skip[@]}&amp;quot; $(echo &amp;quot;$arg&amp;quot; | sed &amp;#39;s/^.*=//&amp;#39;));;
    --nokill=*) nokill=(&amp;quot;${nokill[@]} $(echo &amp;quot;$arg&amp;quot; | sed &amp;#39;s/^.*=//&amp;#39;)&amp;quot;);;
    *) pid=&amp;quot;$arg&amp;quot;;;
  esac
done  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a simple command line parser which accumulates &lt;strong&gt;skip&lt;/strong&gt; and &lt;strong&gt;nokill&lt;/strong&gt;
process IDs. Any other argument is assumed to be the process ID at the root
of the tree to kill.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if test $pid
then
  rkill $pid
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we kick things off by calling &lt;strong&gt;rkill&lt;/strong&gt; with the process ID passed on
the command line.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;Example&lt;/h2&gt;

&lt;p&gt;To check it works, put &lt;strong&gt;rkill.sh&lt;/strong&gt; somewhere on your path and run something
like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

( echo 12; sleep 20; echo 54;
  ( ls; ls ) &amp;gt; /dev/null &amp;amp;
  ( sleep 30; (echo foo) ) &amp;amp;
  echo 90
) | (
  read x
  rkill.sh --skip=$BASHPID $$
  echo finished
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script should suspend and then terminate without leaving any new processes
behind. It&amp;#39;ll display &lt;strong&gt;finished&lt;/strong&gt; after killing all subprocesses - any extra
cleanup can be done after &lt;strong&gt;rkill.sh&lt;/strong&gt; returns.&lt;/p&gt;

    &lt;hr&gt;
    &lt;div class="pagination pagination-centered btn-group"&gt;
        &lt;a class="btn prev" href="/old-skool-splash-screen" title="Old Skool Splash Screen"&gt;&amp;larr; Previous&lt;/a&gt;

        &lt;a class="btn" href="/archive"&gt;Archive&lt;/a&gt;

        &lt;a class="btn next" href="/vu-meter" title="Vu Meter"&gt;Next &amp;rarr;&lt;/a&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    var disqus_developer = 1;
    var disqus_shortname = 'davedoesdev'; // required: replace example with your forum shortname
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href="http://disqus.com" class="dsq-brlink"&gt;blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;

  &lt;/div&gt;
  
  &lt;div class="span3"&gt;
    &lt;section&gt;
      &lt;h4&gt;Published&lt;/h4&gt;
      &lt;div class="date"&gt;&lt;span&gt;2012-09-29&lt;/span&gt;&lt;/div&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container_empty" &gt;
      &lt;h4&gt;Categories&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
      &lt;/ul&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container" &gt;
      &lt;h4&gt;Tags&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
          &lt;li&gt;
            &lt;a href="/tags#script-ref"&gt;script &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#linux-ref"&gt;linux &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#bash-ref"&gt;bash &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;

      &lt;footer&gt;
        &lt;p&gt;&amp;copy; &lt;a href="mailto:dave@davedoesdev.com"&gt;David Halls&lt;span class="icon-envelope icon-white"&gt;&lt;/span&gt;&lt;/a&gt; 2013 
          with help from &lt;a href="http://ruhoh.com" target="_self" title="The Definitive Technical Blogging Framework"&gt;ruhoh&lt;/a&gt;,
          &lt;a href="http://twitter.github.com/bootstrap/" target="_self"&gt;Twitter Bootstrap&lt;/a&gt; and
          &lt;a href="http://www.glyphicons.com"&gt;Glyphicons&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;This site uses cookies for &lt;a href="http://www.getclicky.com/terms" target="_self"&gt;analytics&lt;/a&gt; and &lt;a href="http://help.disqus.com/customer/portal/articles/466259-privacy-policy" target="_self"&gt;commenting&lt;/a&gt;.&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;

    &lt;script&gt;
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66642016);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66642016ns.gif" /&gt;&lt;/p&gt;&lt;/noscript&gt;
    &lt;!-- Google Prettify --&gt;
&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/188.0.0/prettify.js"&gt;&lt;/script&gt;
&lt;script&gt;
  var pres = document.getElementsByTagName("pre");
  for (var i=0; i &lt; pres.length; ++i) {
    pres[i].className = "prettyprint ";
  }
  prettyPrint();
&lt;/script&gt;
&lt;!-- end Google Prettify --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    <item>
      <title>Old Skool Splash Screen</title>
      <link>http://www.davedoesdev.com/old-skool-splash-screen</link>
      <pubDate>2012-09-22</pubDate>
      <description>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Old Skool Splash Screen - Dave Does Dev&lt;/title&gt;
    &lt;meta name="author" content="David Halls"&gt;

    &lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap.min.css?0.30855510067061975" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap-responsive.min.css?0.27764319194735576" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css-social-buttons/zocial.stripped.css?0.7665208905370657" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/darkstrap.css?0.12338528511187907" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/style.css?0.9787479292796349" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/widgets/google_prettify/stylesheets/sunburst.css?0.5824899601181621" type="text/css" rel="stylesheet" media="all"&gt;

&lt;script src="/assets/my_hooligan/javascripts/jquery.min.js?0.8967072705029154"&gt;&lt;/script&gt;
&lt;script src="/assets/my_hooligan/javascripts/bootstrap.min.js?0.48514675250674166"&gt;&lt;/script&gt;
 
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="shortcut icon" href="/assets/media/favicon.ico"&gt;
    &lt;!-- fav and touch icons --&gt;
  &lt;!-- Update these with your own images
    &lt;link rel="shortcut icon" href="images/favicon.ico"&gt;
    &lt;link rel="apple-touch-icon" href="images/apple-touch-icon.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png"&gt;
  --&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class="navbar"&gt;
      &lt;div class="navbar-inner"&gt;
        &lt;div class="container"&gt;
          &lt;!-- .btn-navbar is used as the toggle for collapsed navbar content --&gt;
          &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/a&gt;      


          &lt;a class="brand" href="/"&gt;Dave Does Dev&lt;/a&gt;


          &lt;div class="nav-collapse"&gt;
            &lt;ul class="nav"&gt;
                
                  &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/about"&gt;About Me&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Github&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Twitter&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="hidden-desktop" target="_self"&gt;LinkedIn&lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="hidden-desktop" target="_self"&gt;RSS&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul class="nav pull-right social visible-desktop"&gt;
              &lt;li class="divider-vertical"&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="zocial github icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Github&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="zocial twitter icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Twitter&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="zocial linkedin icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;LinkedIn&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="zocial rss icon" target="_self"&gt;
                  &lt;span class="hidden-desktop"&gt;RSS&lt;/span&gt;
                &lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
      &lt;div class="content"&gt;
        &lt;div class="page-header"&gt;
  &lt;h1&gt;
    Old Skool Splash Screen 
  &lt;/h1&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;div class="span9"&gt;
    &lt;p&gt;After I &lt;a href="/quieter-boot"&gt;got rid of most boot messages&lt;/a&gt;, I wanted to display a
splash screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.syslinux.org"&gt;Syslinux&lt;/a&gt; can show a splash screen but it doesn&amp;#39;t stay around until X starts.
I could have taken the easy route and put &lt;a href="https://launchpad.net/usplash"&gt;Usplash&lt;/a&gt;
or &lt;a href="http://alioth.debian.org/projects/splashy/"&gt;Splashy&lt;/a&gt; into &lt;a href="http://distro.ibiblio.org/tinycorelinux/"&gt;Tiny Core Linux&lt;/a&gt;
on my USB stick.&lt;/p&gt;

&lt;p&gt;But no! I took another route. I used
&lt;a href="http://www.svgalib.org/rus/zgv/"&gt;Zgv&lt;/a&gt;. Zgv is an &lt;a href="http://www.svgalib.org"&gt;SVGAlib&lt;/a&gt;-based image viewer,
so it runs on the Linux console. Feed it an image early on in the Tiny
Core &lt;strong&gt;init.d&lt;/strong&gt; scripts and voila, a splash screen!&lt;/p&gt;

&lt;h2 id="toc_0"&gt;SVGALib&lt;/h2&gt;

&lt;p&gt;It wasn&amp;#39;t all plain sailing though. The first thing was to get SVGAlib compiling
on a modern Linux distribution (let&amp;#39;s assume Ubuntu here). Of course, I had
to make some &lt;a href="https://gist.github.com/3764135#file-svgalib-1-4-3-patch"&gt;patches&lt;/a&gt;. There wasn&amp;#39;t much to
fix:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Only build static libraries. I didn&amp;#39;t need to use SVGAlib with anything else
on Tiny Core Linux.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don&amp;#39;t bother with assembly optimizations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Various type, macro and syntax changes - probably due to a tightening-up of
compiler rules.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_1"&gt;Zgv&lt;/h2&gt;

&lt;p&gt;I also &lt;a href="https://gist.github.com/3767626#file-zgv-5-9-patch"&gt;patched&lt;/a&gt; Zgv - not to fix compile errors, but to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Support &lt;a href="http://www.syslinux.org/wiki/index.php/SYSLINUX#Display_graphic_from_filename:"&gt;LSS16&lt;/a&gt;
image files. LSS16 is an arbitrary format which Syslinux supports for
displaying splash screens. I wanted to use the same files in Syslinux later
on if I wanted to.&lt;/p&gt;

&lt;p&gt;I implemented the main logic for loading LSS16
images as separate &lt;a href="https://gist.github.com/3767626#file-readlss16-c"&gt;source&lt;/a&gt;
and &lt;a href="https://gist.github.com/3767626#file-readlss16-h"&gt;header&lt;/a&gt; files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove support for JPEG, PNG and TIFF images in Zgv. I didn&amp;#39;t need these
libraries so it was pointless to add them to Tiny Core Linux and load them
from the USB stick.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add support for 640 x 480 x 16 colours &lt;a href="http://en.wikipedia.org/wiki/Planar_(computer_graphics)"&gt;planar&lt;/a&gt; VGA mode. &lt;/p&gt;

&lt;p&gt;SVGALib&amp;#39;s &lt;strong&gt;vga_getmodeinfo&lt;/strong&gt; returns 0 bytes per pixel for planar VGA modes.
For my graphics adapter it was only returning one 640 x 480 mode, and it was
planar.&lt;/p&gt;

&lt;p&gt;Since I was only going to be using this mode for 640 x 480, I made a hack
and changed only the graphics mode selection algorithm. From the patch:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+  if(bpp==4) bytepp=0; else bytepp=(bpp+7)/8;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don&amp;#39;t dither LSS16 images to 16 colours! In 16 colour mode, Zgv dithers
images, even if they have 16 colours or less. It defines its own palette
and maps the image onto it. Obviously, it&amp;#39;s better to use the 16 colours in
the image itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fix a SEGV, caused by not setting a global (&lt;strong&gt;image_palette&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="toc_2"&gt;Making LSS16 files&lt;/h2&gt;

&lt;p&gt;I created my splash screen in &lt;a href="http://inkscape.org"&gt;Inkscape&lt;/a&gt; as a vector
graphic, &lt;strong&gt;splash.svg&lt;/strong&gt;. Here&amp;#39;s the script I used for creating a LSS16 file,
&lt;strong&gt;splash.rle&lt;/strong&gt;, from it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;inkscape -e splash-pic.png -w 300 -h 300 -b &amp;#39;#000000&amp;#39; splash.svg
convert splash-pic.png \
        -bordercolor &amp;#39;#000000&amp;#39; \
        -border 170x40 \
        -gravity north \
        -background &amp;#39;#000000&amp;#39; \
        -extend 640x480 \
        -gravity south \
        -fill &amp;#39;#ffffff&amp;#39; \
        -pointsize 30 \
        -annotate +0+50 &amp;#39;Almost there, just a few moments...&amp;#39; \
        splash.png
convert splash.png -colors 16 splash.ppm
ppmtolss16 &amp;#39;#000000=0&amp;#39; &amp;#39;#ffffff=7&amp;#39; &amp;lt; splash.ppm &amp;gt; splash.rle
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Export the file from Inkscape, 300 x 300 on black background.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;a href="http://www.imagemagick.org"&gt;ImageMagick&lt;/a&gt; to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a border around the image - 40px of space at the top and extending
the width to 640px by adding 170px either side.&lt;/li&gt;
&lt;li&gt;Extend the height of the image to 480px.&lt;/li&gt;
&lt;li&gt;Add a message 50px from the bottom of the image.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use ImageMagick to convert the image to 16 color PPM format.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;ppmtolss16&lt;/strong&gt; to convert the PPM image to LSS16 format. &lt;strong&gt;ppmtolss16&lt;/strong&gt; comes with Syslinux. 
The &lt;strong&gt;.rle&lt;/strong&gt; extension because LSS16 uses run-length encoding compression.&lt;/p&gt;

&lt;p&gt;Note how I set the background colour to index 0 and the foreground color to
index 7. Zgv doesn&amp;#39;t treat these indices as special, but Syslinux sets the
console&amp;#39;s text foreground and background to the colours at these indices.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="toc_3"&gt;Displaying the Splash Screen in Tiny Core&lt;/h2&gt;

&lt;p&gt;Finally, we need to call Zgv to display the image while Tiny Core Linux is
loading. I do this by putting the following at the start of
&lt;strong&gt;/etc/init.d/tc-config&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[ -f /proc/cmdline ] || /bin/mount /proc
if grep -q quiet /proc/cmdline
then
  echo -en &amp;quot;\033[2J\033[1;1H&amp;quot;
  exec &amp;gt; /dev/null
  if ! ps -o comm | grep zgv
  then
    sh -c &amp;quot;zgv -p -m \&amp;quot;640 480 4\&amp;quot; --viewer-16col-colour /usr/share/splash.rle &amp;amp;&amp;quot;
  fi
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This clears the screen, homes the cursor, redirects output from the
script to &lt;strong&gt;/dev/null&lt;/strong&gt; and then runs Zgv. &lt;strong&gt;-p&lt;/strong&gt; hides the loading progress
bar. &lt;strong&gt;-m&lt;/strong&gt; selects the display mode to 640 x 480 x 4 bits per pixel.
&lt;strong&gt;--viewer-16col-colour&lt;/strong&gt; seems a bit superfluous given that it knows there
are 4 bits per pixel, but Zgv needs it anyway.&lt;/p&gt;

&lt;p&gt;To stop Zgv before X loads, I put the following at the end of
&lt;strong&gt;/etc/init.d/tc-config&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if grep -q quiet /proc/cmdline
then
  sudo killall -INT zgv
  while ps -o comm | grep zgv; do sleep 1; done
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note I only run Zgv if &lt;strong&gt;quiet&lt;/strong&gt; was passed as a kernel boot parameter.&lt;/p&gt;

&lt;p&gt;You might want to &lt;a href="http://wiki.tinycorelinux.net/wiki:remastering"&gt;remaster&lt;/a&gt;
your Tiny Core image to put these changes in.&lt;/p&gt;

    &lt;hr&gt;
    &lt;div class="pagination pagination-centered btn-group"&gt;
        &lt;a class="btn prev" href="/quieter-boot" title="Quieter Boot"&gt;&amp;larr; Previous&lt;/a&gt;

        &lt;a class="btn" href="/archive"&gt;Archive&lt;/a&gt;

        &lt;a class="btn next" href="/script-cleanup" title="Script Cleanup"&gt;Next &amp;rarr;&lt;/a&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    var disqus_developer = 1;
    var disqus_shortname = 'davedoesdev'; // required: replace example with your forum shortname
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href="http://disqus.com" class="dsq-brlink"&gt;blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;

  &lt;/div&gt;
  
  &lt;div class="span3"&gt;
    &lt;section&gt;
      &lt;h4&gt;Published&lt;/h4&gt;
      &lt;div class="date"&gt;&lt;span&gt;2012-09-22&lt;/span&gt;&lt;/div&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container_empty" &gt;
      &lt;h4&gt;Categories&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
      &lt;/ul&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container" &gt;
      &lt;h4&gt;Tags&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
          &lt;li&gt;
            &lt;a href="/tags#boot-ref"&gt;boot &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#svgalib-ref"&gt;svgalib &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#graphics-ref"&gt;graphics &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#tinycorelinux-ref"&gt;tinycorelinux &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;

      &lt;footer&gt;
        &lt;p&gt;&amp;copy; &lt;a href="mailto:dave@davedoesdev.com"&gt;David Halls&lt;span class="icon-envelope icon-white"&gt;&lt;/span&gt;&lt;/a&gt; 2013 
          with help from &lt;a href="http://ruhoh.com" target="_self" title="The Definitive Technical Blogging Framework"&gt;ruhoh&lt;/a&gt;,
          &lt;a href="http://twitter.github.com/bootstrap/" target="_self"&gt;Twitter Bootstrap&lt;/a&gt; and
          &lt;a href="http://www.glyphicons.com"&gt;Glyphicons&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;This site uses cookies for &lt;a href="http://www.getclicky.com/terms" target="_self"&gt;analytics&lt;/a&gt; and &lt;a href="http://help.disqus.com/customer/portal/articles/466259-privacy-policy" target="_self"&gt;commenting&lt;/a&gt;.&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;

    &lt;script&gt;
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66642016);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66642016ns.gif" /&gt;&lt;/p&gt;&lt;/noscript&gt;
    &lt;!-- Google Prettify --&gt;
&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/188.0.0/prettify.js"&gt;&lt;/script&gt;
&lt;script&gt;
  var pres = document.getElementsByTagName("pre");
  for (var i=0; i &lt; pres.length; ++i) {
    pres[i].className = "prettyprint ";
  }
  prettyPrint();
&lt;/script&gt;
&lt;!-- end Google Prettify --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
    <item>
      <title>Quieter Boot</title>
      <link>http://www.davedoesdev.com/quieter-boot</link>
      <pubDate>2012-09-16</pubDate>
      <description>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Quieter Boot - Dave Does Dev&lt;/title&gt;
    &lt;meta name="author" content="David Halls"&gt;

    &lt;!-- HTML5 shim, for IE6-8 support of HTML elements --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="http://html5shim.googlecode.com/svn/trunk/html5.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;
    &lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap.min.css?0.22183163235898973" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/bootstrap/css/bootstrap-responsive.min.css?0.7562138455151284" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css-social-buttons/zocial.stripped.css?0.04568563878023113" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/darkstrap.css?0.3494072957709159" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/stylesheets/css/style.css?0.6802117420431668" type="text/css" rel="stylesheet" media="all"&gt;
&lt;link href="/assets/my_hooligan/widgets/google_prettify/stylesheets/sunburst.css?0.6601866540102148" type="text/css" rel="stylesheet" media="all"&gt;

&lt;script src="/assets/my_hooligan/javascripts/jquery.min.js?0.7648471497369749"&gt;&lt;/script&gt;
&lt;script src="/assets/my_hooligan/javascripts/bootstrap.min.js?0.7305703848146531"&gt;&lt;/script&gt;
 
    
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
    &lt;link rel="shortcut icon" href="/assets/media/favicon.ico"&gt;
    &lt;!-- fav and touch icons --&gt;
  &lt;!-- Update these with your own images
    &lt;link rel="shortcut icon" href="images/favicon.ico"&gt;
    &lt;link rel="apple-touch-icon" href="images/apple-touch-icon.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png"&gt;
    &lt;link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png"&gt;
  --&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div class="navbar"&gt;
      &lt;div class="navbar-inner"&gt;
        &lt;div class="container"&gt;
          &lt;!-- .btn-navbar is used as the toggle for collapsed navbar content --&gt;
          &lt;a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse"&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
            &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;/a&gt;      


          &lt;a class="brand" href="/"&gt;Dave Does Dev&lt;/a&gt;


          &lt;div class="nav-collapse"&gt;
            &lt;ul class="nav"&gt;
                
                  &lt;li&gt;&lt;a href="/archive"&gt;Archive&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/tags"&gt;Tags&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/categories"&gt;Categories&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/pages"&gt;Pages&lt;/a&gt;&lt;/li&gt;
                
                  &lt;li&gt;&lt;a href="/about"&gt;About Me&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Github&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="hidden-desktop" target="_self"&gt;Twitter&lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="hidden-desktop" target="_self"&gt;LinkedIn&lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="hidden-desktop" target="_self"&gt;RSS&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
            &lt;ul class="nav pull-right social visible-desktop"&gt;
              &lt;li class="divider-vertical"&gt;&lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="https://www.github.com/davedoesdev" class="zocial github icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Github&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.twitter.com/davedoesdev" class="zocial twitter icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;Twitter&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;a href="http://www.linkedin.com/in/dhalls" class="zocial linkedin icon" target="_self"&gt;
                    &lt;span class="hidden-desktop"&gt;LinkedIn&lt;/span&gt;
                  &lt;/a&gt;
                &lt;/li&gt;
              &lt;li&gt;
                &lt;a href="/rss.xml" class="zocial rss icon" target="_self"&gt;
                  &lt;span class="hidden-desktop"&gt;RSS&lt;/span&gt;
                &lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="container"&gt;
      &lt;div class="content"&gt;
        &lt;div class="page-header"&gt;
  &lt;h1&gt;
    Quieter Boot 
  &lt;/h1&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;div class="span9"&gt;
    &lt;p&gt;One of my PCs has a rather unique boot sequence:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.syslinux.org"&gt;Syslinux&lt;/a&gt;, from an SD card and configured to chain
load the next stage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A pre-boot environment, &lt;a href="http://www.freedos.org"&gt;FreeDOS&lt;/a&gt;, from the SD card.
The pre-boot environment does the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check if a USB stick is inserted. If there is one inserted, then continue
to the next stage in the boot sequence. Otherwise...&lt;/li&gt;
&lt;li&gt;Display a message asking the user to insert the USB stick.&lt;/li&gt;
&lt;li&gt;Wait 20 seconds for the USB stick to be inserted.&lt;/li&gt;
&lt;li&gt;If the USB stick is inserted within those 20 seconds, then continue to
the next stage in the boot sequence, but pass a flag indicating to boot
into a maintenance mode. Otherwise...&lt;/li&gt;
&lt;li&gt;Go to a DOS prompt.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;FreeDOS makes a great pre-boot environment - it&amp;#39;s super fast to boot, very
small and you don&amp;#39;t have to faff about producing custom initrds. I used
&lt;a href="http://bretjohnson.us"&gt;Bret Johnson&lt;/a&gt;&amp;#39;s USBDOS drivers to do the USB stick
detection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="http://www.solemnwarning.net/kexec-loader/"&gt;kexec-loader&lt;/a&gt;, from the SD card
(via &lt;a href="http://busybox.net/%7Evda/linld/"&gt;Linld&lt;/a&gt;) and configured to boot the next
stage from the USB stick. I used kexec-loader here because it contains
USB 2.0 drivers, so loading the next stage is much faster than using the
BIOS&amp;#39;s legacy emulation mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The fantastic &lt;a href="http://distro.ibiblio.org/tinycorelinux/welcome.html"&gt;Tiny Core Linux&lt;/a&gt;,
from the USB stick, booting into X with some custom extensions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, this all works well but I wanted to reduce the copious level of noise
(messages) displayed while booting to a minimum.&lt;/p&gt;

&lt;h2 id="toc_0"&gt;Syslinux&lt;/h2&gt;

&lt;p&gt;Syslinux itself makes some noise. I had to &lt;a href="https://gist.github.com/3748363#file-syslinux-4-03-patch"&gt;patch&lt;/a&gt; it to make it quiet. You can see the patch is mostly about supressing
&lt;strong&gt;puts&lt;/strong&gt; and &lt;strong&gt;printf&lt;/strong&gt;. You can also see that the copyright notice is still
displayed.&lt;/p&gt;

&lt;p&gt;I also added some new control codes to Syslinux display files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;STX&lt;/strong&gt; (\002): Home the cursor without clearing the screen.
I found this useful if I displayed a message in the centre of the screen.
Any text that was displayed afterwards was less likely to cause the screen
to scroll.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SOH&lt;/strong&gt; (\001): Hide the cursor.
Useful for a completely black screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ETX&lt;/strong&gt; (\003): Change palette register 1 (normally blue) to bright white,
using &lt;a href="http://webpages.charter.net/danrollins/techhelp/0137.HTM"&gt;INT 10H 1000H&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end I used just &lt;strong&gt;ETX&lt;/strong&gt; in my Syslinux display file.&lt;/p&gt;

&lt;h2 id="toc_1"&gt;FreeDOS&lt;/h2&gt;

&lt;p&gt;Confession: I didn&amp;#39;t bother supressing messages in FreeDOS. Therefore, the
FreeDOS copyright notice was displayed momentarily until the next stage.
If you want to remove this notice, you&amp;#39;ll have to patch FreeDOS and recompile
from source.&lt;/p&gt;

&lt;p&gt;I did use &lt;a href="http://help.fdos.org/en/hhstndrd/base/nansi.htm"&gt;nansi.sys&lt;/a&gt;
to display a greeting message in blue before starting kexec-loader with Linld:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo ESC[34mWelcome!ESC[0m
linld image=vmlinux initrd=initrd.img ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Note: you&amp;#39;ll need to get the literal ESC character into your bat file,
e.g. using ^V in Vim and then pressing the Escape key).&lt;/p&gt;

&lt;p&gt;Of course, since we used &lt;strong&gt;ETX&lt;/strong&gt; in the Syslinux display file, this message
was actually shown in bright white.&lt;/p&gt;

&lt;h2 id="toc_2"&gt;kexec-loader&lt;/h2&gt;

&lt;p&gt;To hide all further messages until X starts, I passed the following kernel
parameters to kexec-loader using Linld:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;quiet
console=tty2
vt.default_blu=0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0
vt.default_grn=0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0
vt.default_red=0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;quiet&lt;/strong&gt; hides most kernel log messages, but unfortunately not all of them -
as the &lt;a href="http://www.kernel.org/doc/Documentation/kernel-parameters.txt"&gt;description&lt;/a&gt; of this parameter says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;quiet&lt;/strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;[KNL] Disable most log messages&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;console=tty2&lt;/strong&gt; makes all kexec-loader&amp;#39;s kernel messages go to tty2 - i.e. they
are hidden because tty1 is shown by default.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;vt.default_*&lt;/strong&gt; parameters change the Linux kernel&amp;#39;s console palette.
As you can see, I set every colour in the palette to black, &lt;em&gt;except&lt;/em&gt; palette
colour 4. This hid all messages except for those displayed using palette number
4.&lt;/p&gt;

&lt;p&gt;The Linux kernel&amp;#39;s console palette is in a &lt;a href="http://git.kernel.org/?p=linux/kernel/git/stable/linux-stable.git;a=blob;f=drivers/tty/vt/vt.c#l1045"&gt;different order&lt;/a&gt;
to &lt;strong&gt;INT 10H&lt;/strong&gt;&amp;#39;s:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unsigned char color_table[] = { 0, 4, 2, 6, 1, 5, 3, 7,
                                       8,12,10,14, 9,13,11,15 };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Palette colour 4 here corresponds to &lt;strong&gt;INT 10H&lt;/strong&gt;&amp;#39;s palette register 1 (i.e.
normally blue). So the effect of this is to hide everything except the
&lt;strong&gt;Welcome!&lt;/strong&gt; message we displayed in the FreeDOS pre-boot environment.&lt;/p&gt;

&lt;h2 id="toc_3"&gt;Tiny Core Linux&lt;/h2&gt;

&lt;p&gt;To keep Tiny Core Linux quiet, I got kexec-loader to boot it with these
parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;quiet
vt.default_blu=0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0
vt.default_grn=0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0
vt.default_red=0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I repeated &lt;strong&gt;vt.default_*&lt;/strong&gt; because otherwise the Linux kernel resets the
palette to the default colours.&lt;/p&gt;

&lt;p&gt;I didn&amp;#39;t boot with &lt;strong&gt;console=tty2&lt;/strong&gt; because I wanted the flexibility to display
messages later in the boot process.&lt;/p&gt;

&lt;h2 id="toc_4"&gt;Summary&lt;/h2&gt;

&lt;p&gt;My goal was to reduce the amount of noise during boot for a PC booting from
Syslinux into FreeDOS then (via Linld) from kexec-loader into Tiny Core Linux.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I patched Syslinux to remove all messages apart from the copyright one.&lt;/li&gt;
&lt;li&gt;I patched Syslinux with an extra display file control code to turn the blue
palette register into bright white.&lt;/li&gt;
&lt;li&gt;I displayed a welcome message in FreeDOS using this colour.&lt;/li&gt;
&lt;li&gt;I started kexec-loader with options to turn all except this colour into black.&lt;/li&gt;
&lt;li&gt;I did the same when starting Tiny Core Linux.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The effect of this is that the following are shown before kexec-loader starts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The BIOS blurb.&lt;/li&gt;
&lt;li&gt;The Syslinux copyright message.&lt;/li&gt;
&lt;li&gt;The FreeDOS copyright message.&lt;/li&gt;
&lt;li&gt;The welcome message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After kexec-loader starts, and until X comes up, only the welcome message is
displayed.&lt;/p&gt;

    &lt;hr&gt;
    &lt;div class="pagination pagination-centered btn-group"&gt;
        &lt;a class="btn disabled prev"&gt;&amp;larr; Previous&lt;/a&gt;

        &lt;a class="btn" href="/archive"&gt;Archive&lt;/a&gt;

        &lt;a class="btn next" href="/old-skool-splash-screen" title="Old Skool Splash Screen"&gt;Next &amp;rarr;&lt;/a&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div id="disqus_thread"&gt;&lt;/div&gt;
&lt;script&gt;
    var disqus_developer = 1;
    var disqus_shortname = 'davedoesdev'; // required: replace example with your forum shortname
    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
&lt;/script&gt;
&lt;noscript&gt;Please enable JavaScript to view the &lt;a href="http://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
&lt;a href="http://disqus.com" class="dsq-brlink"&gt;blog comments powered by &lt;span class="logo-disqus"&gt;Disqus&lt;/span&gt;&lt;/a&gt;

  &lt;/div&gt;
  
  &lt;div class="span3"&gt;
    &lt;section&gt;
      &lt;h4&gt;Published&lt;/h4&gt;
      &lt;div class="date"&gt;&lt;span&gt;2012-09-16&lt;/span&gt;&lt;/div&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container_empty" &gt;
      &lt;h4&gt;Categories&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
      &lt;/ul&gt;
    &lt;/section&gt;

    &lt;section class="tag_box_container" &gt;
      &lt;h4&gt;Tags&lt;/h4&gt;
      &lt;ul class="tag_box"&gt;
          &lt;li&gt;
            &lt;a href="/tags#boot-ref"&gt;boot &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#syslinux-ref"&gt;syslinux &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#freedos-ref"&gt;freedos &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#usb-ref"&gt;usb &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#kexec-loader-ref"&gt;kexec-loader &lt;span&gt;1&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;          &lt;li&gt;
            &lt;a href="/tags#tinycorelinux-ref"&gt;tinycorelinux &lt;span&gt;2&lt;/span&gt;&lt;/a&gt;
          &lt;/li&gt;      &lt;/ul&gt;
    &lt;/section&gt;
  &lt;/div&gt;
&lt;/div&gt;

      &lt;/div&gt;

      &lt;footer&gt;
        &lt;p&gt;&amp;copy; &lt;a href="mailto:dave@davedoesdev.com"&gt;David Halls&lt;span class="icon-envelope icon-white"&gt;&lt;/span&gt;&lt;/a&gt; 2013 
          with help from &lt;a href="http://ruhoh.com" target="_self" title="The Definitive Technical Blogging Framework"&gt;ruhoh&lt;/a&gt;,
          &lt;a href="http://twitter.github.com/bootstrap/" target="_self"&gt;Twitter Bootstrap&lt;/a&gt; and
          &lt;a href="http://www.glyphicons.com"&gt;Glyphicons&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;This site uses cookies for &lt;a href="http://www.getclicky.com/terms" target="_self"&gt;analytics&lt;/a&gt; and &lt;a href="http://help.disqus.com/customer/portal/articles/466259-privacy-policy" target="_self"&gt;commenting&lt;/a&gt;.&lt;/p&gt;
      &lt;/footer&gt;
    &lt;/div&gt; &lt;!-- /container --&gt;

    &lt;script&gt;
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(66642016);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
&lt;/script&gt;
&lt;noscript&gt;&lt;p&gt;&lt;img alt="Clicky" width="1" height="1" src="//in.getclicky.com/66642016ns.gif" /&gt;&lt;/p&gt;&lt;/noscript&gt;
    &lt;!-- Google Prettify --&gt;
&lt;script src="http://cdnjs.cloudflare.com/ajax/libs/prettify/188.0.0/prettify.js"&gt;&lt;/script&gt;
&lt;script&gt;
  var pres = document.getElementsByTagName("pre");
  for (var i=0; i &lt; pres.length; ++i) {
    pres[i].className = "prettyprint ";
  }
  prettyPrint();
&lt;/script&gt;
&lt;!-- end Google Prettify --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</description>
    </item>
  </channel>
</rss>
